// Off-Shore

(define "Corner" // NNW E for example
 (intersection
  (sites Direction from:#1 #2)
  (sites Direction from:#1 #3)
))

(define "HexHullSites"
 (union
  {
   ("Corner" #1 NNW E) 
   ("Corner" #1 NNE SSE) 
   ("Corner" #1 E SSW) 
   ("Corner" #1 SSE W) 
   ("Corner" #1 SSW NNW) 
   ("Corner" #1 W NNE) 
  }
))

(define "SquareHullSites"
 (union
  {
   ("Corner" #1 N E) 
   ("Corner" #1 S E) 
   ("Corner" #1 S W) 
   ("Corner" #1 N W) 
  }
))

(define "P1Territory"
 (difference
  (union
   (sites (values Remembered "P1")) 
   (difference (sites Occupied by:P1) (handSite P1 0))
  ) 
  (sites (values Remembered "P2"))
)) 

(define "P2Territory"
 (difference
  (union
   (sites (values Remembered "P2")) 
   (difference (sites Occupied by:P2) (handSite P2 0))
  ) 
  (sites (values Remembered "P1"))
)) 

(define "CommonTerritory"
 (intersection
  (union (sites (values Remembered "P2")) (difference (sites Occupied by:P2) (handSite P2 0)))
  (union (sites (values Remembered "P1")) (difference (sites Occupied by:P1) (handSite P1 0)))
))

(define "Scoring"
 (and
  {
   (set Score P1 (count Sites in:(intersection (sites Empty) (sites (values Remembered "P1")))))
   (set Score P2 (count Sites in:(intersection (sites Empty) (sites (values Remembered "P2")))))
   (set Value at:(handSite P1 0) (size Array (sizes Group Orthogonal P1)))
   (set Value at:(handSite P2 0) (size Array (sizes Group Orthogonal P2)))
  }
))

(define "CaptureWithin" 
 (forEach Group Orthogonal
  if:(is In (to) (intersection (sites Board) (sites Occupied by:Next)))
  (if
   (no Pieces Next in:(difference (sites) (sites (values Remembered #2))))
   (and
    (forEach Site (<Board:hullType> (sites))
     (forget Value #1 (site))
    )
    (remove (sites))
))))
 
(define "RecordTerritoryOfRevisedGroup"
 (forEach Site (<Board:hullType> (sites Group at:(last To) Orthogonal))
  (if 
   (= (mover) 1)
   (remember Value "P1" (site) unique:True)
   (remember Value "P2" (site) unique:True)
))) 
 
(define "EmptySitesOutsideEnemyTerritoryFor" 
 (difference (sites Empty) (sites (values Remembered #1)))
)
(define "UpdateTotalMoverGroupCount" 
 (set Value at:(handSite Mover 0) (size Array (sizes Group Orthogonal Mover)))
)

(define "UpdateGroupSizeValue4PiecesConnected2Placement"
 (forEach Site 
  (sites Group at:(last To) Orthogonal)
  (set Value at:(site) (count Sites in:(sites Group at:(last To) Orthogonal)))
))

(define "SitesInOversizedGroups" 
 (forEach
  of:(intersection (sites Board) (sites Occupied by:Mover)) 
  (if
   (>
    (value Piece at:(site)) 
    (value Piece at:(handSite Mover 0))
   )
   (sites Around (site) Orthogonal)
)))

(define "IsNotAnIsolatedPlacement"
 (< 0 (count Pieces Mover in:(sites Around (last To) Orthogonal)))
)

//--------------------------

(game "OffShore"
 (players 2)
 (equipment
  {
   (board <Board:type> use:Cell)
   (hand Each size:1)
   (piece "Disc" Each)
  }
 )
 (rules
  (start
   {
    (place "Disc1" (handSite P1 0) value:0) 
    (place "Disc2" (handSite P2 0) value:0) 
   }
  )
  (play
   (or
    (move Pass)
    (move Add
     (to
      (difference
       (union
        {  // "{}" needed because 2nd item might not exist...
         (if
          (= 1 (mover)) 
          ("EmptySitesOutsideEnemyTerritoryFor" "P2")
          ("EmptySitesOutsideEnemyTerritoryFor" "P1")
         )
         (<RestrictionEasementFor:placement>)
        }
       )
       ("SitesInOversizedGroups")
      )
     )
     (then
      (do 
       ("UpdateGroupSizeValue4PiecesConnected2Placement")
       next:("UpdateTotalMoverGroupCount")
       (then
        (if 
         ("IsNotAnIsolatedPlacement")
         ("RecordTerritoryOfRevisedGroup")
         (then
          (priority
           (if 
            (= (mover) 1)
            ("CaptureWithin" "P2" "P1")
            ("CaptureWithin" "P1" "P2")
            (then ("Scoring"))
           )
           ("Scoring")
  )))))))))
  (end 
   (if 
    (all Passed)
    {
     (if
      (> (score Mover) (score Next))
      (result Mover Win)
     )
     (if
      (< (score Mover) (score Next))
      (result Mover Loss)
     )
    } 
    (result Mover Win)
)))) 

//--------------------------------------

(option "Board" <Board> args:{ <type> <hullType> }
 {
  (item "Square" <(square Square 8)> <"SquareHullSites"> "8 Square")
  (item "Go 13" <(square Square 12)> <"SquareHullSites"> "18 Square")
  (item "Go" <(square Square 18)> <"SquareHullSites"> "18 Square")
  (item "Hex 343434" <(hex Limping 3)> <"HexHullSites"> "343434 Hexagon")
  (item "Hex4" <(hex Hexagon 4)> <"HexHullSites"> "4 Hexagon")***
  (item "Hex 454545" <(hex Limping 4)> <"HexHullSites"> "454545 Hexagon")
  (item "Hex5" <(hex Hexagon 5)> <"HexHullSites"> "5 Hexagon")
  (item "Hex6" <(hex Hexagon 6)> <"HexHullSites"> "6 Hexagon")
  (item "Hex7" <(hex Hexagon 7)> <"HexHullSites"> "7 Hexagon")
 }
) 

(option "Variant" <RestrictionEasementFor> args:{ <placement> }
 {
  (item "Strong Territory" 
   < >
   "No placement within Enemy territory."
  ) 
  (item "Weak Territory"
   <(sites Around (intersection (sites Board) (sites Occupied by:Mover)) Orthogonal if:(is Empty (to)))>
   "Placement within Enemy territory is allowed if adjacent to a Friendly group."
  )
 }
)

//------------------------------------------------------------------------------

// need to add Cascade if Value = 1, and Cascade if Piece is of mover.
(metadata
 (info
  {

  }
 )
 
 (graphics
  {
   (board Colour Phase0 (colour 100 200 250 120))
   (board Colour OuterEdges (colour Black))
   (board Colour InnerEdges (colour Black))
   (board StyleThickness OuterEdges 1.5)
   (board StyleThickness InnerEdges 0.4)
   (board StyleThickness InnerVertices 0.4)
   (board StyleThickness OuterVertices 0.4)
   (board Colour Symbols (colour Black))
   (player Colour P1 (colour Black))
   (player Colour P2 (colour LightOrange))
   (region Colour ("P1Territory")     (colour  60 120 170 120)) 
   (region Colour ("CommonTerritory") (colour 120 155 185 120))  
   (region Colour ("P2Territory")     (colour 180 190 200 120))
   (show Piece Value Middle valueOutline:False scale:.8)
  }
 )
)
