//----------------------------
//Utility defines 

(define "PlayableSite" (difference <Board:area> (sites Occupied by:Mover)))

(define "ValueAtTo"
    (max
        1
        (max 
            (results
                from:(last To) 
                to:("FirstFriend" Orthogonal)
                (size Group at:(to) Orthogonal if:(= (mover) (who at:(to))))
))))

(define "ValueAtFrom"
    (set Var "MaxSizeFrom"
        (max
            1
            (max 
                (results
                    from:(from) 
                    to:("FirstFriend" Orthogonal)
                    (size Group at:(to) Orthogonal if:(= (mover) (who at:(to))))
)))))

(define "FirstFriend" 
    (sites To
        (move Hop 
            #1
            (between (min 0)
                if:(or
                    {
                    (= (from) (between))
                    (is Next (who at:(between)))
                    (is Empty (between))
                    }
            ))
            (to <Board:area> if:(is Mover (who at:(to))))
)))
//--------------------------------------------------------
// Variants

(define "Astralesce"  
    (forEach Piece
        (do
            ("ValueAtFrom")
            next:(do
                (move Slide Orthogonal
                    (between
                        if:(or (= (between) (from)) (is In (between) "PlayableSite")) 
                        (apply (remove (between)))
                    )
                    (to ("PlayableSite"))
                ) 
                ifAfterwards:(> "ValueAtTo" (var "MaxSizeFrom"))
))))

(define "Constellate" 
    (forEach Piece
        (do
            ("ValueAtFrom")
            next:(do
                (move Slide Orthogonal
                    (between
                        if:(or
                            (= (between) (from)) 
                            (is In (between) (intersection <Board:area> (sites Empty)))
                    ))
                    (to 
                        if:(is Next (who at:(to))) 
                        (apply (remove (to)))  
                )) 
                ifAfterwards:(> "ValueAtTo" (var "MaxSizeFrom"))
))))

//-----------------------------------------------
// Main routine

(game "Astralesce and Constellation"
    (players 2)
    (equipment
        {
        (board (hex Hexagon <Board:side>) use:Cell)
        (piece "Disc" Each)
        }
    )
    (rules
        (start {<Board:white> <Board:black>})
        (play
            <Game:structure>
        )
        (end 
            <Game:winCondition>
)))

//--------------------------------------
// End conditions

(define "IsSingleGroupOf"
    (= 1
        (count Groups Cell Orthogonal
            if:(is #1 (who at:(to)))
)))

(define "StandardEnd"
    (if 
        (or
            {
            (no Moves Next)
            ("IsSingleGroupOf" Mover)
            ("IsSingleGroupOf" Next)
            }
        )
        {
        (if 
            ("IsSingleGroupOf" Mover)
            (result Mover Win)
        )
        (if 
            ("IsSingleGroupOf" Next)
            (result Next Win)
        )
        ("AMSEnd") 
        }
))

(define "AMSEnd" (if (no Moves Next) (result Mover Loss)))
(define "Last2MoveEnd" (if (no Moves Next) (result Mover Win)))
(define "Dummy" (place <Game:token> 1))

//-------------------------------------------------
// Options

(option "Game" <Game> args:{<structure> <winCondition> <token>} 
    {
    
    (item "Astralesce"
        <"Astralesce"> 
        <"StandardEnd"> 
        <"Starfour"> //   <"Disc"> 
        "Astralesce: Capturing every opponent's piece along the way, slide a piece to a location in-line with larger groups than the piece had been in-line with before moving. (A group is considered in-line if it contains the first friendly piece along any of the 6 radial grid directions.) Win when unified; if tied, the mover wins."
    )
    
    (item "Constellate"
        <"Constellate"> 
        <"StandardEnd"> //   <"AMSEnd"> 
        <"Starfour"> 
        "Constellate:  Slide a piece to a location in-line with larger groups than the piece had been in-line with before moving. (A group is considered in-line if it contains the first friendly piece along any of the 6 radial grid directions.) An opponent's piece at the destination is removed. Win when unified; if tied, the mover wins. However, a player who prevents his opponent from moving before either has won, loses."
    )
    }
)

(option "Board Size" <Board> args:{<side> <area> <white> <black>} 
    {
    (item "Order 3"
        <4> 
        <(sites Inner)> 
        //   <(place "Disc1" {5 12 17 20 25 29 })>
        //   <(place "Disc2" {7 11 16 19 24 31 })>
        <(place "Disc1" {2 5 8 9 12 17 20 25 29 })>
        <(place "Disc2" {1 4 7 11 14 16 19 24 31 })>
    "Order 4 board")
    
    (item "Order 4"
        <5> 
        <(sites Inner)> 
        <(place "Disc1" {7 12 15 21 24 28 31 38 41 44 47 52})>
        <(place "Disc2" {8 13 16 19 22 29 32 36 39 45 48 53})>
    "Order 4 board")*
    
    (item "Order 5"
        <5> 
        <(sites Board)> 
        <(place "Disc1" {0 3 7 10 12 15 18 21 24 28 31 34 35 38 41 44 47 52 55 56 59})>
        <(place "Disc2" {1 4 5 8 13 16 19 22 25 26 29 32 36 39 42 45 48 50 53 57 60})>
    "Order 5 board")
    
    (item "Order 6"
        <6> 
        <(sites Board)>
        <(place "Disc1" {0 3 8 11 14 17 20 21 24 27 32 35 38 41 44 47 50 53 56 59 61 64 67 71 74 77 80 83 85 88})>
        <(place "Disc2" {2 5 7 10 13 16 19 23 26 29 31 34 37 40 43 46 49 52 55 58 63 66 69 70 73 76 79 82 87 90})>
    "Order 6 board")
    }
)

//---------------------------------------------

(define "ColourBackground" (colour 245 245 245)) 

(metadata
    (info     
        {
        }
    )
    
    (graphics 
        {
        (player Colour P1 (colour White))
        (player Colour P2 (colour Black))
        (piece Scale "Disc" 0.91)
        (piece Colour P1 strokeColour:(colour VeryDarkGrey))
        (piece Colour P2 strokeColour:(colour DarkGrey))
        (piece Background "Disc" image:"Disc" fillColour:(colour 0 0 0 75) edgeColour:(colour 0 0 0 0) scale:0.95 offsetX:-1 offsetY:2)
    (piece Foreground "Disc1" image:<Game:token> scale:0.75 ) // fillColour:(colour 0 0 0 75) edgeColour:(colour 0 0 0 0) scale:0.70 )
    (piece Foreground "Disc2" image:<Game:token> fillColour:(colour 255 255 255 60) edgeColour:(colour 255 255 255 120) scale:0.70 )
    (board Colour Phase0 (colour 220 230 245))
    (board StyleThickness InnerEdges 1.6)
    (board StyleThickness OuterEdges 1.6)
    (board StyleThickness InnerVertices 0.45)
    (board StyleThickness OuterVertices 0.45)
    (board Colour InnerVertices (colour Grey))
    (board Colour OuterVertices (colour Grey))
    (board Colour InnerEdges (colour Black))
    (board Colour OuterEdges (colour Black))
    (region Colour (sites Outer) (colour 180 192 210))
    
    }
)
)
