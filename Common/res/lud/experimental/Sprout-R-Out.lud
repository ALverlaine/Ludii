(define "PlayableGroupSites"
    (sites Around (sites) Orthogonal
        if:(and
            (is Empty #2)
            (not
                (is In
                    #2
                    (sites Around
                        (difference
                            (sites Occupied by:#1)
                            (sites)
                        )
                        Orthogonal
        ))))
))

//---------------------------------------
(game "Sprout-R-Out" 
    (players 2)
    (equipment
        {
        (board (trim <Board:type>) use:Cell)
        (piece "Ball" Each )
        (piece "Ball" Neutral)
        }
    )
    (rules
        (play
            (if
                (> 0 (counter))
                (move Add
                    (to
                        (sites Empty)
                        (apply (set State at:(to) 1))
                ))
                (forEach Group
                    Orthogonal
                    if:(and
                        (= (next) (who at:(to)))
                        (= 1 (state at:(to)))
                    )
                    (move Add
                        (to
                            ("PlayableGroupSites" Next (to))
                            (apply
                                (forEach Site 
                                    (sites)
                                    (set State at:(site) 0)
                        )))
                        (then
                            (if 
                                (!= 0
                                    (count Sites
                                        in:(intersection
                                            (sites Occupied by:Next) 
                                            (sites State 1)
                                )))
                                (moveAgain)
                                (do
                                    (forEach Site 
                                        (sites State 2)
                                        (remove (site))
                                    )
                                    next:(do
                                        (forEach Group
                                            Orthogonal
                                            if:(= (mover) (who at:(to)))
                                            (if
                                                (= 0
                                                    (count Sites
                                                        in:("PlayableGroupSites" Mover (to))
                                                ))
                                                (forEach Site (sites)
                                                    (set State at:(site) 2)
                                                ) 
                                                (forEach Site (sites)
                                                    (set State at:(site) 1)
                                        )))
                                        next:(set Value Mover (score Mover)
                                            (then
                                                (set Score Mover
                                                    (+ 
                                                        (count Sites
                                                            in:(sites State 1)
                                                        )
                                                        (count Sites
                                                            in:(forEach
                                                                (sites Empty)
                                                                if:(= Infinity
                                                                    (count Steps Orthogonal
                                                                        (step (to if:(not (is Mover (who at:(to))))))
                                                                        (site)
                                                                        (sites Occupied by:Next)
                                                    )))))
                                                    (then
                                                        (if
                                                            (and
                                                                (= (score Mover) (value Player Mover))
                                                                (= (score Next) (value Player Next))
                                                            )
                                                            (trigger "End" Mover)
        )))))))))))))
        (end 
            (if
                (and  
                    (is Triggered "End" Mover)
                    (is Triggered "End" Next)
                )
                (byScore)
))))

//------------------------------------

(option "Board Size" <Board>
    args:
    {
    <type> 
    } 
    {
    (item "Limping 3" <(hex 3 4)> "Order 3 limping board")*
    (item "Limping 5" <(hex 5 6)> "Order 5 limping board")
    (item "Limping 7" <(hex 7 8)> "Order 7 limping board")
    (item "Cairo 1" 
        <(remove (dual (tiling T33434 5)) cells: {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 20 21 24 27 28 29 35 36 39 40 44 45 46 47 53 54 55 59 60 64 65 71 72 76 79 85 90 93 94 95 96 97 98 99})> 
        "Using an order 1 Cairo board with 48 cells"
    )
    
    (item "Cairo 2"
        <(remove (dual (tiling T33434 9)) cells: {})>  
        "Using an order 2 Cairo board with 160 cells"
    )
    }
)

//----------------------------------------------------------
(metadata
    (info
        {
        }
    )
    
    (define "ColourP1" (colour Black))
    (define "ColourP2" (colour 252 255 234 #1))
    
    (graphics 
        {
        (player Colour P1 ("ColourP1" ~))
        (player Colour P2 ("ColourP2" ~))
        (piece Scale Neutral "Ball" 1.2)
        (piece Scale P1 "Ball" 0.99)
        (piece Scale P2 "Ball" 0.97)
        (piece Colour P1 "Ball" state:0 fillColour:(colour Black))
        (piece Colour P2 "Ball" state:0 fillColour:(colour White))
        (piece Colour P1 "Ball" state:1 fillColour:(colour 0 0 0 80))
        (piece Colour P2 "Ball" state:1 fillColour:(colour 255 255 255 100))
        (piece Colour P1 "Ball" state:2 fillColour:(colour 60 0 0 100))
        (piece Colour P2 "Ball" state:2 fillColour:(colour 255 180 180 100))
    (board Colour Phase0 (colour 202 189 171))// (colour 246 236 213))
    (board Colour OuterEdges (colour 0 0 0))
    (board Colour InnerEdges (colour 0 0 0))
    (board StyleThickness OuterEdges 1.0)
    (board StyleThickness InnerEdges 0.5)
    }
))

