// /Polypods 
//---------------------------------------------
// Utility for determining if a group is alive  
(define "IsAliveAt" // <region>
    (<= 0
        (+
            (results
                from:#1 
                to:(from)
                (if (= 0 (state at:(to))) 1 (- 1))
))))

//---------------------------------- 
// Capture Locations and procedure

(define "CaptureSites"
    (intersection
        (sites Around (intersection (sites Group at:(last To)) (sites State 1)))
        (intersection (sites Occupied by:Next) (sites State 0))
))

(define "KeySitesOfAffectedGroups"
    (sites
        (results
            from:"CaptureSites"
            to:(min (array (difference (sites Group at:(from)) "CaptureSites")))
            (to)
)))

(define "AffectedGroupAt" // The updated group without captured terminals associated with the key location.
    (difference (sites Group at:#1) (sites (values Remembered "CS")))
)

(define "ClaimCapture" // site
    (if 
        (= 1 (state at:(site)))
        (remove (site))
        (add (to (site) (apply (remove (to)))))
))

//-------------------------------

(define "Captures"
    (do
        (forEach Site "CaptureSites"
            (remember Value "CS" (site) unique:True)
            (then
                (forEach Site "KeySitesOfAffectedGroups"
                    (remember Value "KS" (site) unique:True)
        )))
        next:(forEach Site (sites (values Remembered "CS")) (remove (site))
            (then
                (forEach Value
                    (values Remembered "KS") // a key site within the remainder of the group
                    ("UpdateTerminals" ("AffectedGroupAt" (value)))
        )))
        (then 
            (and
                (forEach Value (values Remembered "KS") 
                    (if 
                        (not ("IsAliveAt" ("AffectedGroupAt" (value))))
                        (forEach Site
                            ("AffectedGroupAt" (value)) 
                            ("ClaimCapture") 
                )))
                (forget Value "CS" All
                    (then (forget Value "KS" All))
)))))

//---------------------------------------------
// Updating Group structures 

(define "SurroundingSitesInGroup"
    (array (intersection #1 (sites Around (site))))
)

(define "UpdateTerminals" // <region> such as (sites) or (sites Group at:(last To))
    (forEach Site #1
        (if
            (or
                (< 2 (size Array ("SurroundingSitesInGroup" #1)))
                (and
                    (= 2 (size Array ("SurroundingSitesInGroup" #1)))
                    (< 1 
                        (count Steps 
                            (min ("SurroundingSitesInGroup" #1))
                            (max ("SurroundingSitesInGroup" #1))
            ))))
            (set State at:(site) 1)
            (set State at:(site) 0)
)))

//--------------------------------
// Placement

(define "ToAllowedSites"
    (to
        (difference
            (sites Empty)
            (sites Around
                (intersection (sites Occupied by:Next) (sites State 1))
        ))
        level:0
))

//-----------------------------------------------
// Main routine

(game "Polypods"
    (players 2)
    (equipment
        {
        (board <BoardShape:gridType> use:Vertex)
        (piece "Disc" Each maxState:1)
        }
    )
    (rules
        (play
            (or
                (move Pass)
                (do
                    (move Add "ToAllowedSites" 
                        (then ("UpdateTerminals" (sites Group at:(last To))))
                    )
                    ifAfterwards:("IsAliveAt" (sites Group at:(last To)))
                    (then ("Captures"))
                ) 
                (then 
                    ("Score")
        )))
        (end 
            (if
                (all Passed)
                {
                (if
                    (> (score Mover) (score Next))
                    (result Mover Win)
                )
                (if
                    (and
                        (= (score Mover) (score Next))
                        (>= ("FringeScoreOf" Mover) ("FringeScoreOf" Next))
                    )
                    (result Mover Win)
                )
                }
                (result Next Win)
))))

//-----------------------------
//Scoring

(define "Score"
    (and
        ("ScoreCore4" Mover)
        ("ScoreCore4" Next)
))

(define "ScoreFringe4" (set Score #1 ("FringeScoreOf" #1)))

(define "ScoreCore4"
    (set Score #1
        (count Sites 
            in:(intersection
                (sites Occupied by:#1) 
                (sites State 1)
))))

(define "FringeScoreOf"
    (count Sites
        in:(difference
            (sites Around (sites Occupied by:#1))
            (sites Around (difference (sites Occupied by:All) (sites Occupied by:#1)) includeSelf:True)
)))

//-------------------------------------------------
// Options

(option "Board" <BoardShape> args:{<gridType> <directionsUsed> <DiagShow>} 
    {
    (item "Hex 3" <(tri Hexagon 3)> <Orthogonal> <Hidden> "Order 3, Hex Grid")
    (item "Hex 3,4 - strong AI" <(tri Limping 3)> <Orthogonal> <Hidden> "Order 3-4, Hex Grid")*
    (item "Hex 4" <(tri Hexagon 4)> <Orthogonal> <Hidden> "Order 4, Hex Grid")
    (item "Hex 4,5*" <(tri Limping 4)> <Orthogonal> <Hidden> "Order 4-5, Hex Grid")
    (item "Hex 5" <(tri Hexagon 5)> <Orthogonal> <Hidden> "Order 5, Hex Grid")
    (item "Hex 5,6" <(tri Limping 5)> <Orthogonal> <Hidden> "Order 5-6, Hex Grid") 
    }
)

//---------------------------------------------

(metadata
    (info
        {
        (description "Polypods was created as an exploration of a new capture concept in which a group lives as long as it has more terminal ends than core pieces. Group capture naturally became determinened in two stages: removing terminals, which then in turn cause the group to exceed its core limit. 
            This works best on the hex grid. 
            Since terminals are added in play, they can also be removed without destroying the group.
            All groups fall in the range of with 0 to 3 free terminals. Additions can either help stabilize the group, or destabilize it. 
            Efficiency in scoring encourages growing groups to near the critical size. As does attacking another player's terminals, and being attacked.
            
            Critical size groups are most vulnerable to being killed by terminal attacks instead of merely suffering a terminal loss.
            This is not difficult to use as a tactic, and if the result were to clear too much of the board the game would be too unstable an cycle. Removing only the core, ensures that the resultant groups will be singletons and pairs which are all legal formations, and keep the board from clearing too much. 
            
            However, tit-for-tat captures still can cause major resets. Therefore the capture rule specifies that the ownership of the terminals of the captured groups also changes to the capturing player. 
            
            This final solution allows tactical instability, but strategic stability.
            
            On small boards ties may be more frequent than some players would like. Thus a tie-breaker based on empty territory control has also been added. This value is is intuitive, and not frequently correlated to the core score, so it functions well in this role.
            
        Group count is not used for scoring, because the terminals provide a benefit in allowing for stability and future growth, and thus function best as investments rather than outcomes.")
        (rules "Polypods is a game about groups of connected stones called Polypods.
            
            Understanding the mythical life of a polypod should help you to easily remember the rules.
            
            Polypods are creatures that have poisonous body segments that tie together its numerous feet. To survive, at least half of a polypod must be its feet, and this determines how they may grow and the shapes they may take. 
            
            The feet die and fall off upon contact with the poisonous body segments of other polypods,  however, since the feet themselves are not poisonous, there is no harm in their contact with other polypod's feet. Fortunately a polypod's foot is able to smell the area around it, and thus a polypod avoids extending its feet to touch the bodies of competing polypods.
            
            Hungry polypods do, however, find ways to bring their body against a foot of another polypod, causing that foot (or feet) to self-amputate.     If the attacking polypod is lucky, the loss of a foot will cause its neighbor to die. 
            
            The attacking polypod then ingests the body of its dead neighbor and spawns new polypods in the dead neighbor's feet.
            
            Definitions:
            -- A POLYPOD is a group of interconnected stones. The group includes every stone of the same color that is connected to it.
            (A single stone, or monopod, is also considered as a polypod in these rules.)
            
            Each stone in a polypod has one of two roles: Body or foot.   
            -- FOOT STONES (FEET) are stones that connect to at most two other friendly stones:- and if connected to two stones, those two must already be adjacent to each other. 
            -- BODY STONES are those that serve to link all the polypod feet together. 
            
            As the polypods grow or shrink, the roles of their individual stones change accordingly.
            (In this application the body stones are marked with squares for convenience in reading the board.)
            
            A polypod is ALIVE if it has at least as many feet as body stones.
            
            -- Foot stones in contact with a body stone of the opposite color SELF-AMPUTATE (ie get immediately removed from the board)
            -- when a Polypod DIES, its body stones are removed, and its feet change ownership.
            
            Rules:
            The game uses discs played on the intersections of a triangular grid of the desired size and shape. 
            The board starts empty and Dark starts. Turns Alternate.
            
            The moving player, either passes, or does the following sequence of actions, if possible:
            1. The mover places a piece on an empty space.
            -- The placement must not cause the immediate self-amputation of the placed stone.
            -- It may add to or merge friendy polypods, UNLESS this would cause those polypod(s) to die.
            2. The mover removes all self-amputating feet.
            3. The mover resolves all polypod deaths.
            
            The game ends when the players pass consecutively.
            
            The winner is determined by tallying the value of each player's polypods.
            The value of a polypod is the number of body stones that it contains.
            If tied, score all the empty spaces adjacent to the players' own polypods.
        If this count is also equal, the game is considered a draw.")
        (id "1994")
        (version "1.3.5")
        (classification "experimental")
        (author "Dale W. Walton")
        (credit "Dale W. Walton")
        (date "06-05-2022")
        }
    )
    (graphics 
        {
        (player Colour P1 (colour DarkGreen))
        (player Colour P2 (colour Cream))
        (board Style Graph)
        (board StyleThickness InnerEdges .2)
        (board StyleThickness OuterEdges .2)
        (board StyleThickness InnerVertices .5)
        (show Edges Diagonal <BoardShape:DiagShow>)
        (piece Foreground "Disc" state:1 image:"square.svg" fillColour:(colour 0 0 0 80) scale:0.4)
        (stackType Default .8)
        // (show Piece State)
        }
    )
    (ai (heuristics (score weight:2)))
)
