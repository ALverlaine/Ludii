// --------------------------------------
(define "IsControlledBy" 
    (<=
        (+ <Control:surplus> (count Pieces in:(sites Around (#2) "LoSDirection" if:(!= 0 (who at:(to))))))
        (* 2 (count Pieces #1 in:(sites Around (#2) "LoSDirection")))
))
// --------------------------------------
(define "ScoreFor"
    (set Score #1
        (+
            (results
                from:(forEach
                    (difference (difference (sites Board) (sites Occupied by:#1)) (sites Occupied by:Neutral))    
                    if:("IsControlledBy" #1 (site))
                )
                to:(from) 
                (if (is Empty (to)) 1 2)
))))

(define "MoveTwiceThenScore" 
    (if
        (is Prev Next)
        (moveAgain)
        (and 
            ("ScoreFor" Mover)
            ("ScoreFor" Next)  
)))

//-----------------------------------------------
// Main routine

(game "Dogtown Clans"
    (players 2)
    (equipment
        {
        "BoardUsed"
        (piece "Counter" P1)
        (piece "Counter" P2)
        (piece "X" Neutral)
        (piece "Counter" Neutral)
        }
    )
    (rules
        (meta (passEnd NoEnd))
        (play
            (if
                (and
                    (= -1 (var "DoubleTurnPhase"))
                    (= 1 (mover))
                )
                
                (or
                    (move Pass)
                    (move Add
                        (piece "X0") 
                        (to (sites Empty))
                        (then
                            (if
                                (> 2 (count Pieces in:(sites Occupied by:Neutral)))
                                (moveAgain)
                ))))
                
                (or
                    {
                    (move Add
                        (to
                            (sites Empty)
                            if:(not ("IsControlledBy" Next (to)))
                        )
                        (then
                            (if
                                (= -1 (var "DoubleTurnPhase"))
                                (set Var "DoubleTurnPhase" 1)
                                ("MoveTwiceThenScore")
                    )))
                    (move Remove 
                        (forEach
                            (sites Occupied by:Next)
                            if:("IsControlledBy" Mover (site)) 
                        )
                        (then ("MoveTwiceThenScore"))
                    )
                    }
                )
                (then
                    (if
                        (no Moves Next)
                        (and 
                            ("ScoreFor" Mover)
                            ("ScoreFor" Next)  
        )))))
        
        (end 
            (if 
                (no Moves Mover)
                (result Mover Loss) //last to place wins a tie
))))

/-----------------------------------------
// Defines for Options

(define "LoSDirection" <Grid:connectivity>)
(define "BoardUsed" <Grid:selected> )

(define "Hex2Limp" (board (dual (hex  (/ <BoardSize:smallSide> 2) (+ 2 (/ <BoardSize:smallSide> 2)))) use:Vertex))
(define "SquareGrid" (board (square <BoardSize:smallSide>) use:Vertex))
(define "SquareDiagonal" (board (square <BoardSize:smallSide>) use:Vertex))

//-------------------------------------------------
// Options

(option "Board Size" <BoardSize> args:{<smallSide>} 
    {
    (item "XSmall" <4> "Order 2 board")
    (item "S" <6> "Order 3 board")**
    (item "M" <8> "Order 4 board")
    (item "L" <10> "Order 5 board")
    (item "XL" <12> "Order 6 board")
    (item "XXL" <14> "Order 7 board")
    
    }
)

(option "Board Grid" <Grid> args:{<selected> <connectivity> <diagShow>} 
    {
    (item "Hex Grid" <"Hex2Limp"> <Orthogonal> <Hidden>  "Hex N/N+2 grid w/even nodes, no center")**
    (item "Square grid" <"SquareGrid"> <Orthogonal> <Hidden>  "Square 2N grid w/even nodes, no center")
    (item "Square Diagonal" <"SquareDiagonal"> <All> <ThinDotted> "Square 2N grid w/even nodes, no center")*
    }
)

(option "Node-controlling surplus" <Control> args:{<surplus>}
    {
    (item "1: Highly tactical" <1> "Highly tactical. Control a site with a surplus of 1 on lines of sight.")
    (item "2: Tactical" <2> "Tactical. Control a site with a surplus of 2 on lines of sight.")
    (item "3: Strategic" <3> "Strategic. Control a site with a surplus of 3 on lines of sight.")**
    (item "4: Slow strategic" <4> "Slow strategic. Control a site with a surplus of 4 on lines of sight.")
    }
)
//---------------------------------------------

//-----------------------------------------------
// Main routine

//---------------------------------------------
// (define "ColourBackground" (colour 155 160 195)) 
// (define "ColourBackground" (colour 126 130 156)) 
(define "ColourBackground" (colour 135 170 130)) 

(metadata
    (info
        {
        }
    )
    (graphics 
        {
        (player Colour P1 (colour 120 36 0))
        (player Colour P2 (colour Cream))
        (piece Scale P1 "Counter" 0.98)
        (piece Scale P2 "Counter" 0.98)
        //    (piece Colour P1 "Counter" fillColour:(colour 0 0 0 0) strokeColour:(colour 0 0 0 0) ) 
        //    (piece Colour P2 "Counter" fillColour:(colour 0 0 0 0) strokeColour:(colour 0 0 0 0) ) 
        (piece Colour Neutral "X" fillColour:(colour 0 0 0 0) strokeColour:(colour 0 0 0 0) ) 
        (board Colour Phase0 "ColourBackground")
        (board StyleThickness InnerEdges 0.4)
        (board StyleThickness OuterEdges 0.6)
        (board StyleThickness InnerVertices 0.45)
        (board StyleThickness OuterVertices 0.45)
        (board Colour InnerVertices (colour Grey))
        (board Colour OuterVertices (colour Grey))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (show Edges Diagonal <Grid:diagShow> (colour DarkGrey))
    (board Background fillColour:"ColourBackground" edgeColour:"ColourBackground" scaleX:1.3 scaleY:1.3 )// offsetX:0.021 offsetY:-0.015 )   
    //    (piece Foreground P1 "Counter" image:"Counter" fillColour:(colour 120 36 0) edgeColour:(colour Black) scale:0.98)
    //    (piece Foreground P2 "Counter" image:"Counter" fillColour:(colour Cream) edgeColour:(colour VeryDarkGrey) scale:0.98)
    (piece Foreground P1 "Counter" image:"Hyena" fillColour:(colour 240	240	170 60) edgeColour:(colour Black)  scale:0.43 offsetY:0.1)
    (piece Foreground P2 "Counter" image:"Hyena" fillColour:(colour 120 36 0 60) edgeColour:(colour VeryDarkGrey)  scale:0.42 offsetY:0.1)
    (piece Foreground Neutral "X" image:"Cross" fillColour:(colour DarkBlue) edgeColour:(colour DarkBlue) scale:.45 offsetX:.16 offsetY:.2 )
    (piece Background P1 "Counter" image:"Counter" fillColour:(colour 0 0 0 75) edgeColour:(colour 0 0 0 0) scale:1.0 offsetX:-.1 offsetY:.2)
    (piece Background P2 "Counter" image:"Counter" fillColour:(colour 0 0 0 75) edgeColour:(colour 0 0 0 0) scale:1.0 offsetX:-.15 offsetY:.3)
    (piece Background Neutral "X" image:"Counter" fillColour:"ColourBackground" edgeColour:(colour 0 0 0 0) scale:1.08 )
    }
)
(ai (heuristics (score)))
)
