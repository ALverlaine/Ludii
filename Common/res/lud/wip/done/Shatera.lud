(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "CaptureToPieceAndResetCounter"
    (apply 
        (if (is Enemy (who at:(to)))
            (remove 
                (to) 
                (then (set Counter))
            )
        )
    ) 
)

(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not ("IsInCheck" "King" Mover at:(to)))
    )   
)

(define "DoubleStep"
    (move
        Slide 
        Forward 
        (between (exact 2) if:(is Empty (between))) 
        (to if:(is Empty (to))) 
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step 
        (directions {FR FL}) 
        (to 
            if:(is Enemy (who at:(to))) 
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Shatera"  
    (players {(player N) (player S)})  
    (equipment { 
        (board (square 8)) 
        
        (piece "Pawn" Each 
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty" 
                "CaptureForwardDiagonal"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion")) 
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )
        
        (piece "Rook" Each 
            (move
                Slide 
                Orthogonal 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        (piece "King" Each 
            (move
                Step 
                (to 
                    if:(not (is Friend (who at:(to)))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        (piece "Bishop" Each 
            (move
                Slide 
                Diagonal 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        (piece "Knight" Each 
            (move
                Leap 
                "KnightWalk" 
                (to 
                    if:(not (is Friend (who at:(to)))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        (piece "Queen" Each 
            (move
                Slide 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            ) 
        )
        
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
    })  
    (rules 
        (start { 
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1") 
            (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8") 
        })
        
        phases:{
        (phase "Opening" 
            (play
                (do 
                    (forEach Piece)
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                    (then
                        (and
                            (set Value Mover (+ 1 (value Player Mover)))
                            (if (!= (value Player Mover) 1) (moveAgain))
                        )
                    )
                )
            )
            (nextPhase Mover (= 2 (value Player Mover)) "Playing")
        )
        (phase "Playing"
            (play 
                (if "SameTurn"
                    (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                    (do 
                        (forEach Piece)
                        ifAfterwards:(not ("IsInCheck" "King" Mover))
                    )
                )
            )
        )
        }
        
        (end {
            (if (and 
                    ("IsInCheck" "King" Next)
                    ("NextCanNotMove")
                ) 
                (result Mover Win)
            ) 
            (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw)) 
        })
    )
)

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        }
    )
    
    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })
    
)
