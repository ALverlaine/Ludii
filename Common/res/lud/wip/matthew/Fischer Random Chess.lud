(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))) )
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "CaptureToPieceAndResetCounter"
    (apply 
        (if (is Enemy (who at:(to)))
            (remove 
                (to) 
                (then (set Counter))
            )
        )
    ) 
)

(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not ("IsInCheck" "King" Mover at:(to)))
    )   
)

(define "DecideToCastle"
    (move
        Slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
        #5
    )
)

(define "CastleRook"
    (slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
    )
)

(define "SmallCastling"
    ("DecideToCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastling"
    ("DecideToCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 3 True)))
)

(define "SetEnPassantLocation"
    (then 
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide 
        Forward 
        (between (exact 2) if:(is Empty (between))) 
        (to if:(is Empty (to))) 
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and 
        (is Pending) 
        (= (to) (value Pending)) 
    )
)

(define "EnPassant"
    (move
        Step 
        (directions {FR FL}) 
        (to if:"InLocationEnPassant") 
        (then 
            (remove 
                (ahead (last To) Backward)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step 
        (directions {FR FL}) 
        (to 
            if:(is Enemy (who at:(to))) 
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Fischer Random Chess"  
    (players {(player N) (player S)})  
    (equipment { 
        (board (square 8)) 

        (piece "Pawn" Each 
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty" 
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion")) 
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )
        
        (piece "Rook" Each 
            (move
                Slide 
                Orthogonal 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each 
            (move
                Step 
                (to 
                    if:(not (is Friend (who at:(to)))) 
                    "CaptureToPieceAndResetCounter"
                ) 
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" Each 
            (move
                Slide 
                Diagonal 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        (piece "Knight" Each 
            (move
                Leap 
                "KnightWalk" 
                (to 
                    if:(not (is Friend (who at:(to)))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        (piece "Queen" Each 
            (move
                Slide 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            ) 
        )
        
        (map "King" {(pair 1 "E1") (pair 2 "E8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
    })  
    (rules 
        (start { 
            (place "Rook1" (sites Random (difference (sites Bottom) (expand (sites Right)))))
            (place "King1" (sites Random (difference (intersection {(sites Bottom) (expand (sites Occupied by:Mover) steps:8 E) (sites Empty)}) (sites Right))))
            (place "Rook1" (sites Random (intersection {(sites Bottom) (expand (sites Occupied by:Mover component:"King") steps:8 E) (sites Empty)})))
            (place "Bishop1" (sites Random (intersection {(sites Bottom) (sites Empty) (sites Phase 0)})))
            (place "Bishop1" (sites Random (intersection {(sites Bottom) (sites Empty) (sites Phase 1)})))
            (place "Knight1" (sites Random (intersection (sites Bottom) (sites Empty)) num:2))
            (place "Queen1" (sites Random (intersection (sites Bottom) (sites Empty))))
            (place "Pawn1" (sites Row 1))
            
            (place "Rook2"
            	(forEach (sites Top)
            		if:(= (id "Rook1") (what at:(ahead (site) steps:7 S)))
            	)
            )
            (place "Bishop2"
            	(forEach (sites Top)
            		if:(= (id "Bishop1") (what at:(ahead (site) steps:7 S)))
            	)
            )
            (place "Knight2"
            	(forEach (sites Top)
            		if:(= (id "Knight1") (what at:(ahead (site) steps:7 S)))
            	)
            )
            (place "Queen2"
            	(forEach (sites Top)
            		if:(= (id "Queen1") (what at:(ahead (site) steps:7 S)))
            	)
            )
            (place "King2"
            	(forEach (sites Top)
            		if:(= (id "King1") (what at:(ahead (site) steps:7 S)))
            	)
            )
            (place "Pawn2" (sites Row 6))
        })
        
        (play 
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (do 
                    (or 
                        (forEach Piece)
                        (if (and 
                                ("HasNeverMoved" "King")
                                (not ("IsInCheck" "King" Mover)) 
                            )
                            (or
                                (if (and 
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("CastleRook" "RookLeft" E 3 (is Empty (to))))
                                    )
                                    "BigCastling"
                                )
                                (if (and 
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastling"
                                )
                            )
                        )
                    )
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                )
            )
        )
        
        (end {
            (if (and 
                    ("IsInCheck" "King" Next)
                    ("NextCanNotMove")
                ) 
                (result Mover Win)
            ) 
            (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw)) 
        })
    )
)

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (description "A variation of the game of chess invented by the former World Chess Champion Bobby Fischer.")
        (aliases {"Chess960" "Chess9LX"})
        (rules "Before the game, a starting position is randomly determined and set up, subject to certain requirements. White's pieces (not pawns) are placed randomly on the first rank, following two rules: The bishops must be placed on opposite-color squares. The king must be placed on a square between the rooks. Black's pieces are placed equal-and-opposite to White's pieces. (For example, if the white king is randomly determined to start on f1, then the black king is placed on f8.) Pawns are placed on the players' second ranks as in classical chess. After setup, the game is played the same as classical chess in all respects.")
        (source "<a href=\"https://en.wikipedia.org/wiki/Fischer_random_chess\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Wikipedia</a>")
        (version "1.2.10")
        (classification "board/war/replacement/checkmate/chess")
        (credit "Matthew Stephenson")
        }
    )
    
    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })
    
)
