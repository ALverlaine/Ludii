(define "SlideDiagonal"
        (move Slide 
            (if (= 1 (size Stack at:(from)))
                (directions {FR FL}) 
                (directions {FR FL}) 
            )
        stack:True
        )
)

(define "SlideDiagonalStack"
        (move Slide 
            (if (= 1 (size Stack at:(from)))
                (directions {BR BL}) 
                (directions {BR BL}) 
            )
        stack:True
        )
)    
(define "IsSingleAt" (= 1 (size Stack at:#1)))
(define "IsDoubleAt" (= 2 (size Stack at:#1)))

(define "Transpose"
        (if ("IsDoubleAt" (from))
            (move Step (directions {FR FL})
                (to if:(and
                        (is Friend (who at:(to)))
                        ("IsSingleAt" (to))
                        )
                )
            )
        )    
)

(define "FurthestRow" (sites Mover))
(define "NearestRow" (sites Next))
(define "OwnedSitesInFurthestRow"
        (intersection (sites Occupied by:Mover) ("FurthestRow"))
)
(define "OwnedSitesNotInFurthestRow"
        (difference (sites Occupied by:Mover) ("FurthestRow"))
)
(define "IsSingleInFurthestRow"
        (not
            (all Sites ("OwnedSitesInFurthestRow")
                if:(not ("IsSingleAt" (site)))
            )
        )
)
(define "SingleNotInFurthestRow"
        (not
            (all Sites ("OwnedSitesNotInFurthestRow")
                if:(not ("IsSingleAt" (site)))
            )
        )
)
(define "CanCrown"
        (and
            ("IsSingleInFurthestRow")
            ("SingleNotInFurthestRow")
        )
)
(define "Crown"
        (move
            (from "OwnedSitesNotInFurthestRow" if:("IsSingleAt" (from)))
            (to ("OwnedSitesInFurthestRow") if:("IsSingleAt" (to)))
        )
)
(define "CanBearOff"
        (and (is In (last To) ("NearestRow")) ("IsDoubleAt" (last To)))
)
(define "BearOff"
        (move Remove (last To)
            (then
                (if
                    ("CanCrown") (moveAgain)
                )
            )
        )
)

(define "ImpasseMove"
      (move Remove
           (sites Occupied by:Mover) 
      )
)

//-------------------------------------------------------------------------------

(game "Impasse"
        (players {(player N) (player S)}) 
        (equipment {
                (board (square 8))
                (piece "Disc" P1 (or ("Transpose")  ("SlideDiagonal")))
                (piece "Disc" P2 (or ("Transpose") ("SlideDiagonalStack")))
                (regions P1 (sites Top))
                (regions P2 (sites Bottom))
            })

        (rules
        		
            (start {
	            (place "Disc1" (sites {"A1" "D2" "E1" "H2"}))
	            (place "Disc2" {"A7" "D8" "E7" "H8"})
	            (place Stack "Disc1" (sites {"B8" "C7" "F8" "G7"}) count:2)
	            (place Stack "Disc2" (sites {"B2" "C1" "F2" "G1"}) count:2)
            })
            
            (play
               (if ("SameTurn")
	                   (or ("Crown") ("BearOff"))
	                    (priority {
	                    (forEach Piece
	                        (then
	                            (if
	                                (or ("CanBearOff") ("CanCrown"))
	                                (moveAgain)
	                            )
	                        )
	                    )
	                    ("ImpasseMove")
                    })
               )
            )
            
            (end (if (no Pieces Mover) (result Mover Win)))
        )
)

//-------------------------------------------------------------------------------

(metadata
    (graphics
        {
            (board Style Chess)
        })
)