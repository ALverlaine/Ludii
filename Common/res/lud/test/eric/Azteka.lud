(define "RotateRingOne"
        (do (set Var (what at:27))
        next:(and {
            (remove 27)
            (if (is Occupied 28) (move (from 28) (to 27)))
            (if (is Occupied 29) (move (from 29) (to 28)))
            (if (is Occupied 30) (move (from 30) (to 29)))
            (if (is Occupied 31) (move (from 31) (to 30)))
            (if (is Occupied 25) (move (from 25) (to 31)))
            (if (is Occupied 24) (move (from 24) (to 25)))
            (if (is Occupied 26) (move (from 26) (to 24)))
            (if (!= 0 (var)) (add (piece (var)) (to 26)))
        })
        )    
)

(define "RotateRingTwo"
        (do (set Var (what at:19))
        next:(and {
            (remove 19)
            (if (is Occupied 20) (move (from 20) (to 19)))
            (if (is Occupied 21) (move (from 21) (to 20)))
            (if (is Occupied 22) (move (from 22) (to 21)))
            (if (is Occupied 23) (move (from 23) (to 22)))
            (if (is Occupied 17) (move (from 17) (to 23)))
            (if (is Occupied 16) (move (from 16) (to 17)))
            (if (is Occupied 18) (move (from 18) (to 16)))
            (if (!= 0 (var)) (add (piece (var)) (to 18)))
        })
        )    
)

(define "RotateRingThree"
        (do (set Var (what at:11))
        next:(and {
            (remove 11)
            (if (is Occupied 12) (move (from 12) (to 11)))
            (if (is Occupied 13) (move (from 13) (to 12)))
            (if (is Occupied 14) (move (from 14) (to 13)))
            (if (is Occupied 15) (move (from 15) (to 14)))
            (if (is Occupied 9) (move (from 9) (to 15)))
            (if (is Occupied 8) (move (from 8) (to 9)))
            (if (is Occupied 10) (move (from 10) (to 8)))
            (if (!= 0 (var)) (add (piece (var)) (to 10)))
        })
        )    
)

(define "RotateRingFour"
        (do (set Var (what at:3))
        next:(and {
            (remove 3)
            (if (is Occupied 4) (move (from 4) (to 3)))
            (if (is Occupied 5) (move (from 5) (to 4)))
            (if (is Occupied 6) (move (from 6) (to 5)))
            (if (is Occupied 7) (move (from 7) (to 6)))
            (if (is Occupied 1) (move (from 1) (to 7)))
            (if (is Occupied 0) (move (from 0) (to 1)))
            (if (is Occupied 2) (move (from 2) (to 0)))
            (if (!= 0 (var)) (add (piece (var)) (to 2)))
        })
        )    
)

(define "Rotate"
    (or {
       (move Select (from 27 26) (then ("RotateRingOne")))
       (move Select (from 19 18) (then ("RotateRingTwo")))
       (move Select (from 11 10) (then ("RotateRingThree")))
       (move Select (from 3 2) (then ("RotateRingFour")))
    })
)

//-------------------------------------------------------------------------	

(game "Azteka"
	(players 2)
	(equipment {
		(board
			(remove
				(concentric {0 0 8 8 8 8})
				cells:{1}
			)
		)
		(piece "Pawn" Each)
		(hand Each)
		(regions "RingOne" {24..31})
        (regions "RingTwo" {16..23})
        (regions "RingThree" {8..15})
        (regions "RingFour" {0..7})
        (regions "SegmentOne" {0 8 16 24})
        (regions "SegmentTwo" {2 10 18 26})
        (regions "SegmentThree" {3 11 19 27})
        (regions "SegmentFour" {4 12 20 28})
        (regions "SegmentFive" {5 13 21 29})
        (regions "SegmentSix" {6 14 22 30})
        (regions "SegmentSeven" {7 15 23 31})
        (regions "SegmentEight" {1 9 17 25})
	})
	(rules
		(start (place "Pawn" "Hand" count:14))
		(play (forEach Piece))
		(end { 
		})
	)
)

//-------------------------------------------------------------------------	

(metadata
	(info {
		
	})
	(graphics {
		(board Colour Phase0 (colour VeryDarkGrey))
		(board Background image:"Disc" fillColour:(colour VeryDarkGrey) edgeColour:(colour VeryDarkGrey) scale:0.8)
        (piece Scale "Pawn" 0.75)        
        (board Colour OuterEdges (colour Black))
        (board Colour InnerEdges (colour Black))
	})
)