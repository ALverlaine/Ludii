(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "CaptureToPiece"
    (apply 
        (if (is Enemy (who at:(to)))
            (remove 
                (to)
            )
        )
    ) 
)

(define "CaptureForwardDiagonal"
    (move
        Step 
        (directions {FR FL}) 
        (to 
            if:(is Enemy (who at:(to)))
            (apply 
                (remove 
                    (to)
                )
            )
        )
    )
)

(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))) )
)

(define "DoubleStep"
    (move
        Slide 
        Forward 
        (between (exact 2) if:(is Empty (between))) 
        (to if:(is Empty (to))) 
    )
)

//------------------------------------------------------------------------------

(game "Lombard Chess"
	    (players {(player N) (player S)})  
	    (equipment { 
	        (board (square 8)) 
	        (piece "King" Each
	            (or
	                (move
	                    Step 
	                    (to 
	                        if:(not (is Friend (who at:(to)))) 
	                        "CaptureToPiece" 
	                    )
	                )
	                (if (= 1 (state at:(from)))
	                	(or
	                    (move
	                        Hop 
	                        (between 
		                        	(range 1 2)
		                        	if:(not (is Enemy (who at:(between))))
		                        ) 
	                        (to 
	                            if:(is Empty (to))
	                        )
	                    )
	                    (move
	        	                Leap 
	        	                "KnightWalk" 
	        	                (to 
	        	                	if:(is Empty (to))
	        	                ) 
	        	            )
	                    )
	                )
	                ("RememberPieceHasMoved")
	            )
	        )
	        (piece "Rook" Each
	            (move
	                Slide 
	                Orthogonal 
	                (to 
	                    if:(is Enemy (who at:(to))) 
	                    "CaptureToPiece"
	                ) 
	            )		
	        )
	        (piece "Bishop" Each
	            (move
	                Hop 
	                Diagonal 
	                (between if:True) 
	                (to 
	                    if:(not (is Friend (who at:(to)))) 
	                    "CaptureToPiece" 
	                )
	            )		
	        )
	        (piece "Knight" Each
	            (move
	                Leap 
	                "KnightWalk" 
	                (to 
	                    if:(not (is Friend (who at:(to)))) 
	                    "CaptureToPiece"
	                ) 
	            )			
	        )
	        (piece "Queen" Each
	            (or
	                (move
	                    Step 
	                    Diagonal
	                    (to 
	                        if:(not (is Friend (who at:(to)))) 
	                        "CaptureToPiece" 
	                    )
	                    "RememberPieceHasMoved"
	                )	
	                (if (= 1 (state at:(from)))
	                    (move
	                        Hop 
	                        Diagonal
	                        (between if:True)
	                        (to 
	                            if:(is Empty (to))
	                        )
	                    )
	                )
	                ("RememberPieceHasMoved")
	            )
	        )
	        (piece "Pawn" Each
	            (or {
	                (move Step 
	                    Forward 
	                    (to if:(is Empty (to)))
	                )
	                "CaptureForwardDiagonal"
	                (if (is In (from) (sites Start (piece (what at:(from)))))
	                    "DoubleStep"
	                )
	                }
	                (then
	                    (if (is In (last To) (sites Mover "Promotion")) 
	                        (and
	                            (promote (last To) (piece (id "Queen" Mover)))
	                            (set State at:(last To) 1)
	                        )
	                    )
	                )
	            )		
	        )
	        (regions "Promotion" P1 (sites Top) )
	        (regions "Promotion" P2 (sites Bottom))
	    })
	    (rules 
	        (start { 
	            (place "Pawn1" (sites Row 1))
	            (place "Pawn2" (sites Row 6))
	            (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1" state:1) (place "King1" coord:"E1" state:1) 
	            (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8" state:1) (place "King2" coord:"E8" state:1) 
	        })
	        
	        (play 
	            (do (forEach Piece) 
	                ifAfterwards:(not ("IsInCheck" "King" Mover))
	                (then
	                    (if (and (= 1 (state at:(where "King" Next))) ("IsInCheck" "King" Next))
	                        ("PieceHasMoved" (where "King" Next))
	                    )
	                )
	            )
	        )
	        
	        (end {
	            (if (and 
	                    ("IsInCheck" "King" Next)
	                    ("NextCanNotMove")
	                ) 
	                (result Mover Win)
	            ) 
	            (if (no Moves Next) (result Mover Draw)) 
	            (if (= (count Pieces Next) 1) (result Mover Win) ) 
	        })
	    )
	)

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (description "Lombard Chess was a type of Chess game played in medieval Lombaardy, Italy.")
        (rules "8x8 Board. Modifications on Shatranj.")
        (source "Murray 1913: 461-462.")
        (version "1.2.1")
        (classification "board/war/chaturanga/reconstruction")
        (credit "Eric Piette")
        }
    )
    
    (graphics {
        (board Style Chess)
    })
    
)
