(define "Columns" 5)
(define "PiecesOwnedBy" (count Cell at:(handSite #1)))
(define "SitesSowed" (sites (values Remembered "SowedSites")))
(define "NextSiteExist"
	(!= (last To) ("NextSite"))
)
(define "NextSite"
	(ahead (last To) (directions Vertex from:(last From) to:(last To)))	
)
(define "SowAgainMove" 
		(move Select
    			(from (last To))
    			(to (difference (sites Around (last To)) ("SitesSowed")))
    			(then
    				(and
    					(add (piece (id "Seed" Shared)) (to (last To)))
        				(if (< 1 (var "NumToSow")) 
        					(and {
        						(set Var "NumToSow" (- (var "NumToSow") 1))
        						(moveAgain)
        						(remember Value "SowedSites" (last From))
        					})
        					(and {
	        					(forget Value "SowedSites" All)
	        					(set Var "NumToSow" 0)
	        					(if ("NextSiteExist")
	        						(if (is Occupied ("NextSite"))
	        							(moveAgain)
	        						)
	        					)
        					})
        				)
    				)
    			)
    		)	
)

//------------------------------------------------------------------------------

(game "Dongjintian (Four Players)"  
    (players 4)  
    
    (equipment { 
        (mancalaBoard 4 "Columns" store:None)
        (piece "Seed" Shared)
        (hand Each)
        (regions "ProtectingHoles" (sites {7 12}))
    })  
    (rules 
        
        (start (set Count 5 to:(sites Board)))
        
        (play 
        	(if (and ("SameTurn") (!= 0 (var "NumToSow")))
        		(if (can Move ("SowAgainMove"))
        			("SowAgainMove")
        			(do 
	        			(and {
	        				(add (piece (id "Seed" Shared)) (to (last To)) count:(var "NumToSow"))
	    					(forget Value "SowedSites" All)
	        				(set Var "NumToSow" 0)
	        			})
	        			next:(move Pass)
        			)
        		)
        		(if ("SameTurn")
    	        	(move 
    		        		(from ("NextSite"))
    		        		(to (sites Around (from)))
    		        		(then
    		        			(and {
    		        				(if (is Occupied (last From))
    			        				(and {
    			        					(moveAgain)
    			        					(set Var "NumToSow" (count at:(last From)))
    				        				(remember Value "SowedSites" (last From))
    			        				})
    			        				(if ("NextSiteExist")
    		        						(if (is Occupied ("NextSite"))
    		        							(moveAgain)
    		        						)
    		        					)
    		        				)
    		        				(remove (last From) count:(count at:(last From)))
    		        			})
    		        		)
    		        	)
	        	(move 
	        		(from (sites Board) if:(is Occupied (from)))
	        		(to (sites Around (from)))
	        		(then
	        			(and {
	        				(if (is Occupied (last From))
		        				(and {
		        					(moveAgain)
		        					(set Var "NumToSow" (count at:(last From)))
			        				(remember Value "SowedSites" (last From))
		        				})
		        				(if ("NextSiteExist")
	        						(if (is Occupied ("NextSite"))
	        							(moveAgain)
	        						)
	        					)
	        				)
	        				(remove (last From) count:(count at:(last From)))
	        			})
	        		)
	        	)
	        	)
        	)
        )
        		
        (end
                (if (<= (count Pieces All in:(sites Board)) 1)
                    (byScore {
                        (score P1 ("PiecesOwnedBy" P1)) 
                        (score P2 ("PiecesOwnedBy" P2))
                    })
                )
            )
    )
)

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        }
    )
    
    (graphics {
        (board Style Mancala)
    })
    
)

