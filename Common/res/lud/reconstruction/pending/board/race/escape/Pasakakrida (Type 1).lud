(game "Pasakakrida (Type 1)" 
    <Variant>
)

//------------------------------------------------------------------------------

(option "Variant" <Variant> args:{ <variant> } {
    (item "Two Four-Sided Dice" 
        <
        (players 2) 
        (equipment { 
            ("TableBoard"
                [
                {
                (track "Track1" {0..11 23..12 End} P1 directed:True)
                (track "Track2" {12..23 11..0 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {12..23 11..0 End} P1 directed:True)
                (track "Track2" {0..11 23..12 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {12..23 11..0 End} P1 directed:True)
                (track "Track2" {12..23 11..0 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {0..11 23..12 End} P1 directed:True)
                (track "Track2" {0..11 23..12 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {11..0 12..23 End} P1 directed:True)
                (track "Track2" {23..12 0..11 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {23..12 0..11 End} P1 directed:True)
                (track "Track2" {11..0 12..23 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {23..12 0..11 End} P1 directed:True)
                (track "Track2" {23..12 0..11 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {11..0 12..23 End} P1 directed:True)
                (track "Track2" {11..0 12..23 End} P2 directed:True)
                }
                ]   
                |
                {
                (track "Track1" {12..23 0..11 End} P1 directed:True)
                (track "Track2" {0..11 12..23 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {23..12 11..0 End} P1 directed:True)
                (track "Track2" {11..0 23..12 End} P2 directed:True)
                }
                ]
            )
            (dice d:4 faces:{2 3 4 5} num:2) 
            (piece "Disc" Each
                (move
                    (from (from) level:(level))
                    (to ("NextSiteFrom" (from))
                        if:(or 
                            (not ("IsEnemyAt" (to))) 
                            (and ("IsEnemyAt" (to)) (= 1 (size Stack at:(to))))
                        )
                        (apply 
                            (if ("IsEnemyAt" (to)) 
                                (fromTo
                                    (from (to))
                                    (to (mapEntry Next))
                                )
                            )	
                        )
                    )
                )			
            ) 
            (map {(pair 1 [1 | 23]) (pair 2 [1 | 23])}) // starting point
        }) 
        (rules 
            (start {
                (place Stack "Disc2" 0 count:5)
                (place Stack "Disc1" 2 count:4)
                (place Stack "Disc1" 6 count:4)
                (place Stack "Disc2" 11 count:2)
                (place Stack "Disc1" 23 count:2)
                (place Stack "Disc2" 18 count:4)
                (place Stack "Disc2" 14 count:4)
                (place Stack "Disc1" 12 count:5)
            })
            (play 
                (do 
                    (if ("NewTurn") (roll))
                    next:(forEach Die 
                        if:("DieNotUsed")
                        (forEach Piece top:True    
                            (then ("ReplayNotAllDiceUsed"))
                        )
                    )
                )		
            )
            (end [#])
        )
        > 
    "The game is played with two four-sided dice (incomplete).") 
    (item "Two Cubic Dice" 
        <
        (players 2) 
        (equipment { 
            ("TableBoard"
                [
                {
                (track "Track1" {0..11 23..12 End} P1 directed:True)
                (track "Track2" {12..23 11..0 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {12..23 11..0 End} P1 directed:True)
                (track "Track2" {0..11 23..12 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {12..23 11..0 End} P1 directed:True)
                (track "Track2" {12..23 11..0 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {0..11 23..12 End} P1 directed:True)
                (track "Track2" {0..11 23..12 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {11..0 12..23 End} P1 directed:True)
                (track "Track2" {23..12 0..11 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {23..12 0..11 End} P1 directed:True)
                (track "Track2" {11..0 12..23 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {23..12 0..11 End} P1 directed:True)
                (track "Track2" {23..12 0..11 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {11..0 12..23 End} P1 directed:True)
                (track "Track2" {11..0 12..23 End} P2 directed:True)
                }
                ]   
                |
                {
                (track "Track1" {12..23 0..11 End} P1 directed:True)
                (track "Track2" {0..11 12..23 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {23..12 11..0 End} P1 directed:True)
                (track "Track2" {11..0 23..12 End} P2 directed:True)
                }
                ]
            )
            (dice d:6 num:2)  
            (piece "Disc" Each
                (move
                    (from (from) level:(level))
                    (to ("NextSiteFrom" (from))
                        if:(or 
                            (not ("IsEnemyAt" (to))) 
                            (and ("IsEnemyAt" (to)) (= 1 (size Stack at:(to))))
                        )
                        (apply 
                            (if ("IsEnemyAt" (to)) 
                                (fromTo
                                    (from (to))
                                    (to (mapEntry Next))
                                )
                            )	
                        )
                    )
                )			
            ) 
            (map {(pair 1 [1 | 23]) (pair 2 [1 | 23])}) // starting point
        }) 
        (rules 
            (start {
                (place Stack "Disc2" 0 count:5)
                (place Stack "Disc1" 2 count:4)
                (place Stack "Disc1" 6 count:4)
                (place Stack "Disc2" 11 count:2)
                (place Stack "Disc1" 23 count:2)
                (place Stack "Disc2" 18 count:4)
                (place Stack "Disc2" 14 count:4)
                (place Stack "Disc1" 12 count:5)
            })
            (play 
                (do 
                    (if ("NewTurn") (roll))
                    next:(forEach Die 
                        if:("DieNotUsed")
                        (forEach Piece top:True    
                            (then ("ReplayNotAllDiceUsed"))
                        )
                    )
                )		
            )
            (end [#])
        )
        > 
    "The game is played with two cubic dice (incomplete).") 
    (item "Three Cubic Dice" 
        <
        (players 2) 
        (equipment { 
            ("TableBoard"
                [
                {
                (track "Track1" {0..11 23..12 End} P1 directed:True)
                (track "Track2" {12..23 11..0 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {12..23 11..0 End} P1 directed:True)
                (track "Track2" {0..11 23..12 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {12..23 11..0 End} P1 directed:True)
                (track "Track2" {12..23 11..0 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {0..11 23..12 End} P1 directed:True)
                (track "Track2" {0..11 23..12 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {11..0 12..23 End} P1 directed:True)
                (track "Track2" {23..12 0..11 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {23..12 0..11 End} P1 directed:True)
                (track "Track2" {11..0 12..23 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {23..12 0..11 End} P1 directed:True)
                (track "Track2" {23..12 0..11 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {11..0 12..23 End} P1 directed:True)
                (track "Track2" {11..0 12..23 End} P2 directed:True)
                }
                ]   
                |
                {
                (track "Track1" {12..23 0..11 End} P1 directed:True)
                (track "Track2" {0..11 12..23 End} P2 directed:True)
                }
                |
                {
                (track "Track1" {23..12 11..0 End} P1 directed:True)
                (track "Track2" {11..0 23..12 End} P2 directed:True)
                }
                ]
            )
            (dice d:6 num:3) 
            (piece "Disc" Each
                (move
                    (from (from) level:(level))
                    (to ("NextSiteFrom" (from))
                        if:(or 
                            (not ("IsEnemyAt" (to))) 
                            (and ("IsEnemyAt" (to)) (= 1 (size Stack at:(to))))
                        )
                        (apply 
                            (if ("IsEnemyAt" (to)) 
                                (fromTo
                                    (from (to))
                                    (to (mapEntry Next))
                                )
                            )	
                        )
                    )
                )			
            ) 
            (map {(pair 1 [1 | 23]) (pair 2 [1 | 23])}) // starting point
        }) 
        (rules 
            (start {
                (place Stack "Disc2" 0 count:5)
                (place Stack "Disc1" 2 count:4)
                (place Stack "Disc1" 6 count:4)
                (place Stack "Disc2" 11 count:2)
                (place Stack "Disc1" 23 count:2)
                (place Stack "Disc2" 18 count:4)
                (place Stack "Disc2" 14 count:4)
                (place Stack "Disc1" 12 count:5)
            })
            (play 
                (do 
                    (if ("NewTurn") (roll))
                    next:(forEach Die 
                        if:("DieNotUsed")
                        (forEach Piece top:True    
                            (then ("ReplayNotAllDiceUsed"))
                        )
                    )
                )		
            )
            (end [#])
        )
        > 
    "The game is played with three cubic dice (incomplete).") 
})

//------------------------------------------------------------------------------

(rulesets { 
    
    (ruleset "Ruleset/Two Four-Sided Dice (Incomplete)" {
        "Variant/Two Four-Sided Dice"
    })
    
    (ruleset "Ruleset/Two Cubic Dice (Incomplete)" {
        "Variant/Two Cubic Dice"
    })
    
    (ruleset "Ruleset/Three Cubic Dice (Incomplete)" {
        "Variant/Three Cubic Dice"
    })
    
})

//------------------------------------------------------------------------------

(metadata 
    (info
        {
        (description "Pasakakrida is a race game that was described in the Manasollasa, a twelfth-century CE Sanskrit text from India. The game could be played with either four-sided or six-sided dice.")
        (useFor "Ruleset/Two Four-Sided Dice (Incomplete)" (rules "24 long rounded spaces, arranged in two rows of twelve, and each row split into two groups of six. Fifteen pieces per player, one with white pieces and the other with colored pieces. Two four-sided dice, with the values 2, 3, 4, 5. The pieces start in the following arrangement: White with two pieces on the top right space, five on the top left space, four on the  third from the bottom left, and four in the sixth from the bottom right; Colored pieces are: four on the sixth space from the top right, four on the third space from the top left; five in the bottom left and two on the bottom  right. Pieces are sent back to the beginning when another player's piece lands on an opponent's piece. A player's piece cannot land on a space that is occupied by more than one of the opponent's pieces. Pieces move according to the throws of the dice."))
        (useFor "Ruleset/Two Four-Sided Dice (Incomplete)" (source "Bock-Raming 1995a."))
        (useFor "Ruleset/Two Four-Sided Dice (Incomplete)" (id "1741"))
        (useFor "Ruleset/Two Cubic Dice (Incomplete)" (rules "Played with two cubic dice with the values 1-6."))
        (useFor "Ruleset/Two Cubic Dice (Incomplete)" (source "Bock-Raming 1995a."))
        (useFor "Ruleset/Two Cubic Dice (Incomplete)" (id "1742"))
        (useFor "Ruleset/Three Cubic Dice (Incomplete)" (rules "Three cubic dice with the values 1-6."))
        (useFor "Ruleset/Three Cubic Dice (Incomplete)" (source "Bock-Raming 1995a."))
        (useFor "Ruleset/Three Cubic Dice (Incomplete)" (id "1743"))
        (source "Bock-Raming 1995: 114-115.")
        (version "1.3.7")
        (classification "board/race/escape/reconstruction")
        (origin "This game was played in India, from around 1126 to 1138.")
        }
    )
    
    (graphics {
        (show Edges Hidden)
        (board Style Table)
        (stackType 0 Backgammon)
        (stackType 1 Count)
        (stackType 2 Count)
    })
    
)
