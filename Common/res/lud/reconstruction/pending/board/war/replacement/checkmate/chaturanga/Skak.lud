(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "CaptureToPiece"
    (apply 
        (if ("IsEnemyAt" (to))
            (remove 
                (to) 
            )
        )
    ) 
)

(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not ("IsInCheck" "King" Mover at:(to)))
    ) 
)

(define "DecideToCastle"
    (move
        Slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
        #5
    )
)

(define "CastleRook"
    (slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
    )
)

(define "SmallCastling"
    ("DecideToCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastling"
    ("DecideToCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 3 True)))
)

(define "SetEnPassantLocation"
    (then 
        (set Pending (ahead (last To) Backward))
    )
)

(define "InLocationEnPassant"
    (and 
        (is Pending) 
        (= (to) (value Pending)) 
    )
)

(define "EnPassant"
    (move
        Step 
        (directions {FR FL}) 
        (to if:"InLocationEnPassant") 
        (then 
            (remove 
                (ahead (last To) Backward)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step 
        (directions {FR FL}) 
        (to 
            if:("IsEnemyAt" (to)) 
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Skak"
	    <Variant>
	)

	//------------------------------------------------------------------------------

	(option "Variant" <Variant> args:{ <variant> }
	    {
	    (item "Incomplete"
	        <
	        ("TwoPlayersNorthSouth") 
	        (equipment { 
	            (board (square 8)) 
	            
	            (piece "Pawn" Each 
	                (or {
	                    (if (is In (from) (sites Start (piece (what at:(from)))))
	                        ("DoubleStepForwardToEmpty" "SetEnPassantLocation")
	                    )
	                    "StepForwardToEmpty" 
	                    "CaptureForwardDiagonal"
	                    "EnPassant"
	                    }
	                    (then
	                        (if (is In (last To) (sites Mover "Promotion")) 
	                            (moveAgain)
	                        )
	                    )
	                )
	            )
	            
	            (piece "Rook" Each 
	                (move
	                    Slide 
	                    Orthogonal 
	                    (to 
	                        if:("IsEnemyAt" (to)) 
	                        "CaptureToPiece"
	                    ) 
	                    "RememberPieceHasMoved"
	                )
	            )
	            (piece "King" Each 
	                (move
	                    Step 
	                    (to 
	                        if:(not ("IsFriendAt" (to))) 
	                        "CaptureToPiece"
	                    ) 
	                    "RememberPieceHasMoved"
	                )
	            )
	            (piece "Bishop" Each 
	                (move
	                    Slide 
	                    Diagonal 
	                    (to 
	                        if:("IsEnemyAt" (to)) 
	                        "CaptureToPiece"
	                    ) 
	                )
	            )
	            (piece "Knight" Each 
	                (move
	                    Leap 
	                    "KnightWalk" 
	                    (to 
	                        if:(not ("IsFriendAt" (to))) 
	                        "CaptureToPiece"
	                    ) 
	                )
	            )
	            (piece "Queen" Each 
	                (move
	                    Slide 
	                    (to 
	                        if:("IsEnemyAt" (to)) 
	                        "CaptureToPiece"
	                    ) 
	                ) 
	            )
	            
	            (map "King" {(pair 1 "E1") (pair 2 "E8")})
	            (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
	            (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
	            (regions "Promotion" P1 (sites Top))
	            (regions "Promotion" P2 (sites Bottom))
	        }) 
	        (rules 
	            (start [#])
	            
	            (play 
	                (if "SameTurn"
	                    (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
	                    (do 
	                        (or 
	                            (forEach Piece)
	                            (if (and 
	                                    ("HasNeverMoved" "King")
	                                    (not ("IsInCheck" "King" Mover)) 
	                                )
	                                (or
	                                    (if (and 
	                                            ("HasNeverMoved" "RookLeft")
	                                            (can Move ("CastleRook" "RookLeft" E 3 (is Empty (to))))
	                                        )
	                                        "BigCastling"
	                                    )
	                                    (if (and 
	                                            ("HasNeverMoved" "RookRight")
	                                            (can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
	                                        )
	                                        "SmallCastling"
	                                    )
	                                )
	                            )
	                        )
	                        ifAfterwards:(not ("IsInCheck" "King" Mover))
	                    )
	                )
	            )
	            
	            (end {
	                (if (and 
	                        ("IsInCheck" "King" Next)
	                        ("NextCanNotMove")
	                    ) 
	                    (result Mover Win)
	                ) 
	                (if (= 1 (count Pieces Next)) (result Mover Win))
	                (if (no Moves Mover) (result Mover Draw)) 
	            })
	        )
	        >
	        "The incomplete ruleset."
	    )
	})

	//------------------------------------------------------------------------------

	(rulesets { 
	    
	    (ruleset "Ruleset/Skak (Incomplete)" {
	        "Variant/Incomplete"
	    })
	    
	})

	//------------------------------------------------------------------------------


(metadata 
    
    (info
        {
        (description "Skak is the form of Chess played in Iceland. It maintains an old form of winning by the \"bare king.\"")
        (rules "8x8 board. The pieces move as follows, with the number per player: 1 x King: moves one space orthogonally or diagonally. 1 x Queen: moves any distance diagonally or orthogonally. 2 x Rook: Any number of spaces orthogonally. 2 x Bishop: moves any distance diagonally 2 x Knight: Moves as a chess knight. 8 x Pawn: Moves one space forward orthogonally; one space forward diagonally to capture. Promoted when reaching the eighth rank. Castling and en passant are allowed. An opponent's piece is captured by moving a player's own piece onto a space occupied by the opponent's piece. When a King can be captured on the next turn by an opponent's piece, it is in check. The King must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins. Stalemate is a draw. When a player captures all of their opponent's pieces except the King are captured, the opponent loses, though this is considered a lesser win.
        ")
        (source "Murray 1913: 468-469.")
        (id "1334")
        (version "1.3.7")
        (classification "board/war/replacement/checkmate/chaturanga/reconstruction")
        (credit "Eric Piette")
        (origin "This game was played in Iceland, around 1892.")
        }
    )
    
    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })
    
    (recon {
        (concept "NumStartComponents" 32)
    })
    
)
