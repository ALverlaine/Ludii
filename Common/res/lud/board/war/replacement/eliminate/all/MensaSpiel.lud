
(define "Who" (= (id Mover) 1))
(define "RingsAreEmpty"  (no Pieces All in:(sites "Rings")))
(define "PlayerHasReserve" (not (no Pieces in:(sites Mover "Reserve"))))
(define "PlayerHasStarters" (not (no Pieces in:(sites Mover "Base"))))
(define "PlayerHasPrisoners" (not (no Pieces in:(sites Mover "Prison"))))
(define "PieceDef" (piece Foreground #1 image:"triangle" fillColour:(colour #2) edgeColour:(colour Black) scaleX:0.35 scaleY:0.65 offsetY:+0.94))
(define "Pips+-" (if "Who" (mapEntry <Starter:Pip1> #1)(mapEntry <Starter:Pip2> #1)))
(define "PipsCap"  (if "Who" (mapEntry <Starter:Pip2> (last To))(mapEntry <Starter:Pip1> (last To))))
(define "Captured" (>  (size Stack at:(last To)) (value Piece at:(last To)) ))
(define "StartAttack" (move (from (sites Mover "Base"))(to (intersection (sites #1 #2) (sites Empty))) "StartThen" )  )
(define "PrisTrans" (add (piece (id #1 Mover))(to (sites Mover #2 ))
count:(count Stack at:(last To) if:(= (id "Cone" #3)(what at:(to) level:(level)))) stack:True ))
(define "Extinction" (and { (no Moves Next)
        (= 0 (count Sites in:(intersection (sites Occupied by:Next) (sites "RingsplusBase") )) )
        (< (count Sites in:(sites Occupied by:Next)) 2)
    })
)
(define "StartMove" (if (= 1 (var "StartS")) (move (from (sites Mover "Base"))
        (to (difference (sites Mover "HomeRing") (mapEntry "SameColor" (last To)))) "StartThen")
        (if (and (= 2 (var "StartS")) (= 1 (var "CntrAttack")))
            ("StartAttack" ~ "Rings" )
            ("StartAttack" Mover "HomeRing" )
        )
    )
)
(define "StartThen"
    (then
        (and {
            (promote (last To) (piece {"Cone"}) Mover)
            (set Var "StartS" (+ 1 (var "StartS")))
            
            (if (= 0 (var "StartS")) (set Var "St1Pos" (last To)))
            (if (and (= 1 (var "StartS"))
                    (or (= (mapEntry "Attacks1" (last To)) (var "St1Pos"))
                    (= (mapEntry "Attacks2" (last To)) (var "St1Pos")) )
                )
                (set Var "CntrAttack" 1)
            )
            (if (> (var "StartS") 2) (set Var "CntrAttack" 0))
            (if (and {(is Friend (who at:(mapEntry "SameColor" (last To))))
                    (!= 1 (var "CntrAttack"))
                    "PlayerHasReserve"
                })
                (and (add (piece (id "Starter" Mover))(to (sites Mover "Base")) stack:True)
                    (remove (sites Mover "Reserve"))
                )
            )
            (set Value at:(last To) 1)
            (addScore Mover ("Pips+-" (last To)))
        })
    )
)
(define "MoveThen" (then (and { (set Var "StartS" 3) (set Var "CntrAttack" 0 )
            (if (= 15 (last To))
                (and {("PrisTrans" "Starter" "Base" Mover)
                    ("PrisTrans" "Prisoner" "Prison" Next)
                    (remove 15 count:(count Stack at:(last To)))
                })
                
                (if (and (is Friend (who at:(mapEntry "SameColor" (last To))))
                        "PlayerHasReserve"
                    )
                    (and (remove (sites Mover "Reserve"))
                        (add (piece (id "Starter" Mover))(to (sites Mover "Base")) stack:True)
                    )
                )
            )
            (set Value at:(last To) (count Stack at:(last To)))
            
            (addScore Mover (- ("Pips+-" (last To)) ("Pips+-" (last From)) ) )
            (if "Captured"(addScore Next (- 0 "PipsCap"  )))
        })
    )
)

(define "PrisonerExchange"
    (if (and (no Pieces in:(sites Mover "Base"))
            "PlayerHasReserve"
        )
        (move (from ) (to (sites Mover "Base")) )
        
        (then 
            (and {(promote (last To) (piece "Starter") Mover )
                (remove (sites Mover "Reserve"))
                (add (piece (id "Reserve" Next))(to (sites Next "Reserve")) stack:True)
                (moveAgain)
            })
        )
    )
)

(define "IsSelfStaleLastManLoop"
    (and { (no Moves Next)
        (no Pieces in:(sites Mover "Reserve"))
        (no Pieces in:(sites Mover "Base"))
        (= 1 (count Pieces Mover in:(intersection (sites "Rings")(sites Occupied by:Mover )) ) )
    })
)

(define "IsLastMan"
    (and { (no Pieces in:(sites Mover "Base") )
        (= 1 (count Pieces in:(intersection (sites "Rings") (sites Occupied by:Mover))  ))
        (= 1 (size Stack at:(regionSite (intersection (sites Occupied by:Mover)(sites Mover "SitesLastMan")) index:0)) )
        "PlayerHasReserve"
    })
)
(define "LastMan"
    (move 
        (from ) (to 15)
        (then
            (and {(set Var "CntrAttack" 0)
                (set Score Mover 0)
                (remove 15 )
                (remove (sites Mover "Reserve"))
                (add (piece (id "Starter" Mover))(to (sites Mover "Base")) count:2 stack:True)
            })
    ))
)

(define "PiP" (board Foreground image:"disc" fillColour:(colour #1) edgeColour:(colour Black) scale:0.04 offsetX:#2 offsetY:#3) )
(define "DiscX" (board Foreground image:"disc" fillColour:#1 edgeColour:#2 scale:#3 offsetX:#4 offsetY:#5) )
(define "SquaS" (board Foreground image:"square" fillColour:#1 edgeColour:(colour Black) scale:0.138 offsetX:#2 offsetY:#3) )
(define "SquaX" (board Foreground image:"square" fillColour:#1 edgeColour:#2 scaleX:#3 scaleY:#4 offsetX:#5 offsetY:#6) )
(define "RectS" (board Foreground image:"rectangle" fillColour:(colour #1) edgeColour:(colour #2) scaleX:#3 scaleY:#4 offsetX:#5 offsetY:#6) )
(define "RectX" (board Foreground image:"rectangle" fillColour:#1 edgeColour:#2 scaleX:#3 scaleY:#4 offsetX:#5 offsetY:#6) )
(define "Minu" (board Foreground image:"minus" fillColour:#1 edgeColour:#2 scaleX:#3 scaleY:#4  rotation:#5 offsetX:#6 offsetY:#7) )
(define "G1" (colour 239 231 182)) (define "G2" (colour 210 189 048)) (define "LG" (colour LightGrey))
(define "Bl" (colour Black)) (define "Wh" (colour White))
(define "RingOrT"   (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT") ))
(define "CaptPos"  (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty))(array {(mapEntry #1 (from)) }) ) index:0)))

(define "MoveSteps"
    (move (from)
        (to (union {
                (intersection { 
                    (difference "RingOrT" (from))
                    (sites Empty)
                    (sites { (mapEntry #1 (from)) (mapEntry #2 (from)) (mapEntry #3 (from)) (mapEntry #4 (from))
                    (mapEntry #5 (from)) (mapEntry #6 (from)) (mapEntry #7 (from)) (mapEntry #8 (from)) })
                })
                (intersection {
                    (sites "Rings")(sites Occupied by:Next)
                    (sites { ("CaptPos" #1) ("CaptPos" #2)("CaptPos" #3) ("CaptPos" #4)
                        ("CaptPos" #5) ("CaptPos" #6)("CaptPos" #7) ("CaptPos" #8) (mapEntry #9 (from))
                    })
                })
            })
        ) 
        stack:True   "MoveThen"
    )
)

(define "ConeMove"
    (if (= (score Mover) 1) ("MoveSteps"  "Step7a" "Step7b" "Step1c" ~   ~ ~ ~ ~  ~ )
        (if (= (score Mover) 2) ("MoveSteps"  "Step2a" "Step2b" "Step2c" ~   ~ ~ ~ ~  ~ )
            (if (= (score Mover) 3) ("MoveSteps"  "Step3a" "Step3b" "Step3c" "Step3d"  ~ ~ ~ ~  ~ )
                (if (= (score Mover) 4) ("MoveSteps"  "Step4a" "Step4b" "Step4c" ~   ~ ~ ~ ~   ~ )
                    (if (= (score Mover) 5) ("MoveSteps"  "Step3a" "Step3b" "Step5c" "Step5d"  ~ ~ ~ ~   ~ )
                        (if (= (score Mover) 6) ("MoveSteps"  "Step2a" "Step2b" "Step6c" "Step6d"  "Step6e"  ~ ~ ~   ~ )
                            (if (= (score Mover) 7) ("MoveSteps"  "Step7a" "Step7b" "Step7c" "Step7d"  "Step7e" ~ ~ ~   ~ )
                                (if (= (score Mover) 8) ("MoveSteps"  "Step8a" "Step8b" "Step8c" "Step8d"  ~ ~ ~ ~   "SameColor" )
                                    (if (= (score Mover) 9) ("MoveSteps"  "Step7a" "Step7b" "Step9c" "Step9d"  "Step9e" "Step9f" ~ ~   ~ )
                                        (if (= (score Mover) 10) ("MoveSteps"  "Step2a" "Step2b" "Step10c" "Step10d"  "Step10e"  ~ ~ ~   ~ )
                                            (if (= (score Mover) 11) ("MoveSteps"  "Step3a" "Step3b" "Step11c" "Step11d"  "Step11e" "Step11f" "Step11g" ~   ~ )
                                                (if (= (score Mover) 12) ("MoveSteps"  "Step4a" "Step12b" "Step12c" "Step12d"  "Step12e" "Step12f"  ~ ~   "Step12g" )
                                                    (if (= (score Mover) 13) ("MoveSteps"  "Step3a" "Step3b" "Step13c" "Step13d"  "Step13e" "Step13f" "Step13g" ~   ~ )
                                                        (if (= (score Mover) 14) ("MoveSteps"  "Step2a" "Step2b" "Step14c" "Step14d"  "Step14e" ~ ~ ~   "Step14f" )
                                                            (if (= (score Mover) 15) ("MoveSteps"  "Step7a" "Step7b" "Step15c" "Step15d"  "Step15e" "Step15f" "Step15g" "Step15h" ~ )
                                                                (if (= (score Mover) 16) ("MoveSteps"  "Step8a" "Step8b" "Step16c" "Step16d"  "Step16e" "Step16f" "Step16g" ~  "SameColor" )
                                                                    (if (= (score Mover) 17) ("MoveSteps"  "Step7a" "Step7b" "Step17c" "Step17d"  "Step17e" "Step17f" "Step17g" "Step17h"  ~ )
                                                                        (if (> (score Mover) 17) ("MoveSteps"  "Step2a" "Step2b" "Step18c" "Step18d"  "Step18e" "Step18f" ~ ~   "Step18g" )  //  never really reached ..
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(game "MensaSpiel"
    (players 2)
    (equipment { (board (remove (rectangle 5 7) cells:{2 4  7 8 9   11 12 13   17 31} )  )
        
        (regions "Base" P1   {<Starter:Bas1>})     (regions "Base" P2   {<Starter:Bas2>})
        (regions "Prison" P1 {<Starter:Pri1>})     (regions "Prison" P2 {<Starter:Pri2>})
        (regions "Reserve" P1 {<Starter:Res1>})    (regions "Reserve" P2 {<Starter:Res2>})
        (regions "HomeRing" P1 <Starter:Hom1>)     (regions "HomeRing" P2 <Starter:Hom2>)
        (regions "SitesLastMan" P1 <Starter:Las1>) (regions "SitesLastMan" P2 <Starter:Las2> )
        (regions "Rings" {6..12 14 16 18..24}) (regions "RingsplusT" {6..12 14 15 16 18..24}) (regions "RingsplusBase" {6..24})
        
        (map "PipsP1" {6..24} {4 1 3 2 2 1 2 0 3 0 1 0 1 3 2 2 2 0 3})
        (map "PipsP2" {6..24} {0 3 1 2 2 3 2 0 1 0 3 0 3 1 2 2 2 4 1})
        (map "Attacks1" {6..24} {10 23 9 12 8 6 9 0 16 0 7 0 12 11 11 16 7 21 6 })
        (map "Attacks2" {6..24} {10 18 22 14 19 19 24 0 23 0 14 0 20 24 22 18 20 21 8 })
        (map "SameColor" {6..24} {23 24 18 20 21 14 22 0 11 0 19 0 8 16 9 10 12 6 7 })
        (map "Step1c" {14 16 }{15 15})
        (map "Step2a" {6..24} {19 14 6 22 18 24 20 0 20 0 23 0 23 21 14 19 24 18 11 })
        (map "Step2b" {6..24} {8 12 21 11 16 9 7 0 7 0 10 0 10 6 12 8 9 16 22 })
        (map "Step2c" {8 14 21 16 9 22} {15 16 15 14 15 15 })
        (map "Step3a" {6..24} {20 19 12 23 22 23 21 0 19 0 24 0 9 14 8 12 10 9 10 })
        (map "Step3b" {6..24} {14 21 20 18 24 16 8 0 6 0 11 0 22 7 6 7 18 11 16 })
        (map "Step3c" {7..23} {15 16 14 15 0 0 0 22 0 8 0 0 0 15 16 14 15 }) 
        (map "Step3d" {14 16} {9 21 })
        (map "Step4a" {6..24} {21 20 19 24 23 22 14 0 12 0 18 0 16 8 7 6 11 10 9 })
        (map "Step4b" {6..24} {15 16 9 8 14 15 0 0 10 0 7 0 0 15 16 9 8 14 15 })
        (map "Step4c" {8 14 21 9 16 22} {22 23 22 21 20 21 })
        (map "Step5c" {6..24} {16 9 10 7 8 14 15 0 11 0 6 0 15 16 9 10 7 8 14 })
        (map "Step5d" {7..23} {22 23 20 21 0 0 0 24 0 19 0 0 0 22 23 20 21 })
        (map "Step6c" {6..24} {9 10 11 6 7 8 16 0 18 0 12 0 14 9 10 11 6 7 8 })
        (map "Step6d" {6..24} {22 23 24 19 20 21 0 0 0 0 0 0 0 22 23 24 19 20 21 })
        (map "Step6e" {6 19 11 24} {15 15 15 15 })
        (map "Step7a" {6..24} {7 8 14 10 11 18 6 0 8 0 9 0 11 12 19 14 16 22 18 })
        (map "Step7b" {6..24} {12 6 7 16 9 10 19 0 21 0 22 0 24 20 21 20 23 24 23 })
        (map "Step7c" {6..24} {10 11 18 12 6 7 9 0 11 0 6 0 8 10 11 18 12 6 7 })
        (map "Step7d" {6..24} {23 24 0 0 19 20 22 0 24 0 19 0 21 23 24 0 0 19 20  })
        (map "Step7e" {6 19 7 20 10 23 11 24} {16 16 15 15 15 15 14 14 })
        (map "Step8a" {6..24} {11 18 11 6 12 6 10 0 10 0 7 0 7 11 18 11 6 12 6 })
        (map "Step8b" {6..24} {24 16 24 19 14 19 23 0 23 0 20 0 20 24 16 24 19 14 19 })
        (map "Step8c" {6 19 8 21 9 22 11 24} {9 9 15 15 15 15 8 8 })
        (map "Step8d" {6 19 11 24} {22 22 21 21 })
        (map "Step9c" {6..24} {18 11 10 7 6 12 11 0 9 0 8 0 6 18 11 10 7 6 12 })
        (map "Step9d" {6..24} {10 24 23 20 19 7 24 0 22 0 21 0 19 23 24 23 20 19 7 })
        (map "Step9e" {6..24} {23 9 16 14 8 20 0 0 15 0 15 0 0 10 9 16 14 8 20 })
        (map "Step9f" {20 7 10 23} {22 22 21 21 })
        (map "Step10c" {6..24} {11 10 9 8 7 6 18 0 16 0 14 0 12 11 10 9 8 7 6 })
        (map "Step10d" {6..24} {24 23 22 21 20 19 0 0 0 0 0 0 0 24 23 22 21 20 19 })
        (map "Step10e" {21 8 9 22} {15 15 15 15 })
        (map "Step11c" {6..24} {10 11 10 7 6 7 11 0 9 0 8 0 6 10 11 10 7 6 7 })
        (map "Step11d" {6..24} {23 24 23 20 19 20 24 0 22 0 21 0 19 23 24 23 20 19 20 })
        (map "Step11e" {6..24} {18 9 16 14 8 12 0 0 15 0 15 0 0 18 9 16 14 8 12 })
        (map "Step11f" {7 20 10 23} {22 22 21 21 })
        (map "Step11g" {7 20 10 23} {15 15 15 15 })
        (map "Step12b" {6..24} {11 18 11 6 12 6 10 0 10 0 7 0 7 11 18 11 6 12 6 })
        (map "Step12c" {6..24} {24 16 24 19 14 19 23 0 23 0 20 0 20 24 16 24 19 14 19 })
        (map "Step12d" {6 19 8 21 9 22 11 24} {9 9 9 9 8 8 8 8 })
        (map "Step12e" {6 19 8 21 9 22 11 24} {22 22 22 22 21 21 21 21 })
        (map "Step12f" {6 19 8 21 9 22 11 24} {15 15 15 15 15 15 15 15 })
        (map "Step12g" {14 16} {11 19 })
        (map "Step13c" {6..24} {10 11 10 7 6 7 9 0 11 0 6 0 8 10 11 10 7 6 7 })
        (map "Step13d" {6..24} {23 24 23 20 19 20 22 0 24 0 19 0 21 23 24 23 20 19 20 })
        (map "Step13e" {6..24} {16 9 14 16 8 14 15 0 8 0 9 0 15 16 9 14 16 8 14 })
        (map "Step13f" {7..23} {22 18 12 21 0 0 0 21 0 22 0 0 0 22 18 12 21 })
        (map "Step13g" {7 20 10 23} {15 15 15 15 })
        (map "Step14c" {6..24} {9 10 11 6 7 8 16 0 18 0 12 0 14 9 10 11 6 7 8 })
        (map "Step14d" {6..24} {22 23 24 19 20 21 0 0 0 0 0 0 0 22 23 24 19 20 21 })
        (map "Step14e" {6 19 11 24} {15 15 15 15 })
        (map "Step14f" {8 9 21 22} {18 20 10 12 })
        (map "Step15c" {6..24} {10 11 18 12 6 7 9 0 11 0 11 0 8 10 11 18 12 6 7 })
        (map "Step15d" {6..24} {23 24 20 23 19 20 22 0 24 0 24 0 21 23 24 7 10 19 20 })
        (map "Step15e" {6..24} {16 21 10 7 22 16 15 0 6 0 6 0 15 16 8 10 7 9 16 })
        (map "Step15f" {6..24} {14 9 23 20 8 14 0 0 19 0 19 0 0 14 9 23 20 8 14 })
        (map "Step15g" {7 20 10 23} {22 22 21 21 })
        (map "Step15h" {7 20 10 23} {15 15 15 15 })
        (map "Step16c" {6..24} {9 20 15 15 23 8 14 0 12 0 18 0 16 9 7 15 15 10 8 })
        (map "Step16d" {6 19 8 21 9 22 11 24} {22 22 6 6 11 11 21 21 })
        (map "Step16e" {6 19 8 21 9 22 11 24} {8 8 9 9 8 8 9 9 })
        (map "Step16f" {6 19 8 21 9 22 11 24} {21 21 19 19 21 21 22 22 })
        (map "Step16g" {6 19 8 21 9 22 11 24} {15 15 22 22 24 24 15 15 })
        (map "Step17c" {6..24} {10 11 10 7 6 7 8 0 6 0 11 0 6 10 6 10 7 6 7 })
        (map "Step17d" {6..24} {23 9 12 14 8 12 11 0 9 0 8 0 9 23 9 12 14 8 10 })
        (map "Step17e" {6..24} {18 15 16 18 15 16 21 0 15 0 15 0 19 18 11 16 18 11 16 })
        (map "Step17f" {6..24} {14 19 23 20 19 20 24 0 19 0 21 0 22 14 15 23 20 15 12 })
        (map "Step17g" {6..24} {20 22 0 0 21 23 0 0 22 0 24 0 0 7 22 0 0 19 20 })
        (map "Step17h" { 7 20 10 23} {24 24 24 21 })
        (map "Step18c" {6..24} {11 10 9 8 7 6 18 0 16 0 14 0 12 8 10 6 8 7 6 })
        (map "Step18d" {6..24} {21 23 15 15 20 19 0 0 0 0 0 0 0 11 23 9 11 20 9 })
        (map "Step18e" {6 19 8 21 22 9 11 24} {24 24 19 15 15 21 22 19 })
        (map "Step18f" {8 21 22 9} {22 22 21 24 })
        (map "Step18g" {6 19 11 24} {23 16 14 7 })
        
        (piece "Prisoner" Each  "PrisonerExchange" )
        (piece "Starter"  Each  "StartMove" ) (piece "Reserve"  Each )
        (piece "Cone"  Each (if "IsLastMan" (or "LastMan" "ConeMove" ) "ConeMove" ))
        
    })
    
    (rules
        (start {
            (place Stack "Starter1" <Starter:Bas1> count:3 )
            (place Stack "Starter2" <Starter:Bas2> count:3 )
            (place Stack "Reserve1" <Starter:Res1> count:6 )
            (place Stack "Reserve2" <Starter:Res2> count:6 )
        })
        
        (play   (do   (if "RingsAreEmpty" (and {(set Var "StartS" 0 ) (set Var "CntrAttack"  0 )   }))
                next:(if ( "SameTurn") "StartMove"
                    (forEach Piece top:True )
                )
            )
        )
        
        (end  { (if "Extinction" (result Mover Win) )
            (if (>= (count Pieces Mover in:(sites "Prison")) <Num:pris>) (result Mover Win) )
            (if "IsSelfStaleLastManLoop" (result Mover Draw) )
        })
    )
)

(option "Start Order" <Starter> args:{ <Pip1> <Pip2> <Bas1> <Bas2> <Pri1> <Pri2> <Res1> <Res2> <Hom1> <Hom2>              <Las1> <Las2>             <color1> <color2> }
    {
    (item "White begins" <"PipsP1"> <"PipsP2"> <13> <17> <0> <4> <1> <3> <{6 7 8 12 14 19 20 21}> <{9 10 11 16 18 22 23 24}> <{6 9 16 21 22}> <{7 9 14 21 22}> <White> <VeryDarkGrey>  "White player starts the game.")*
    (item "Black begins" <"PipsP2"> <"PipsP1"> <17> <13> <4> <0> <3> <1> <{9 10 11 16 18 22 23 24}> <{6 7 8 12 14 19 20 21}> <{7 9 14 21 22}> <{6 9 16 21 22}> <VeryDarkGrey> <White>  "Black player starts the game.")
}   )

(option "End Rules" <Num> args:{ <pris> }
    { (item "Get 1 Prisoner"   <1>  "Sudden Death Match: 1 Prisoner ends it all.")
    (item "Get 2 Prisoners"  <2>  "Transfer 2 enemy-pieces to your prison-cell.")
    (item "Get 3 Prisoners"  <3>  "Transfer 3 enemy-pieces to your prison-cell.")*
    (item "Get 4 Prisoners"  <4>  "Transfer 4 enemy-pieces to your prison-cell.")
    (item "Get 5 Prisoners"  <5>  "Transfer 5 enemy-pieces to your prison-cell.")
    (item "Get 6 Prisoners"  <6>  "Transfer 6 enemy-pieces to your prison-cell.")
} )
//-------------
(metadata
    (info
        {
        }
    )
    
    (graphics {
        ("RectX" "G1" "G2" 1.07 1.26 0 0) ("RectX" "G1" "G1" 1.06 1.24 0 0)
        ("SquaX" "G1" "Bl" 0.31 0.304 -0.287 -0.140) ("SquaX" "G1" "Bl" 0.31 0.304  0.282 -0.140)
        ("RectS" LightGrey LightGrey 0.012 0.6 -0.285 0.072 )("RectS" LightGrey LightGrey 0.012 0.6 0.285 0.072 )
        ("RectS" LightGrey LightGrey 0.05 0.02 -0.35 0.284 ) ("RectS" LightGrey LightGrey 0.05 0.02  0.35 0.284 )
        ("RectS" Black Black 0.158 0.02 0.001 -0.142 )
        
        ("SquaS" (colour 0 230 230) -0.43 -0.286 )("PiP" White -0.4682 -0.322 )
        ("PiP" White -0.4682 -0.25 )("PiP" White -0.3905 -0.322 )("PiP" Black -0.3905 -0.25 )
        ("SquaS" (colour 52 64 200) -0.285 -0.286 )("PiP" Black -0.3232 -0.322 )
        ("PiP" Black -0.3232 -0.25 )("PiP" White -0.2455 -0.322 )("PiP" White -0.2455 -0.25 )
        ("SquaS" (colour 87 99 51) -0.14 -0.286 )("PiP" Black -0.1782 -0.322 )
        ("PiP" White -0.1782 -0.25 )("PiP" White -0.1005 -0.322 )("PiP" Black -0.1005 -0.25 )
        ("SquaS" (colour 163 73 163) -0.43 -0.144 )("PiP" White -0.4682 -0.18 )
        ("PiP" Black -0.4682 -0.108 )("PiP" White -0.3905 -0.18 )("PiP" Black -0.3905 -0.108 )
        ("SquaS" (colour 0 232 0) -0.14 -0.144 )("PiP" White -0.1782 -0.18 )
        ("PiP" Black -0.1782 -0.108 )("PiP" White -0.1005 -0.18 )("PiP" White -0.1005 -0.108 )
        ("SquaS" (colour 230 0 0) -0.43 -0.001 )("PiP" White -0.4682 -0.037 )
        ("PiP" White -0.4682 0.035 )("PiP" White -0.3905 -0.037 )("PiP" White -0.3905 0.035 )
        ("SquaS" (colour 255 127 0) -0.285 -0.001 )("PiP" Black -0.3232 -0.037 )
        ("PiP" Black -0.3232 0.035 )("PiP" White -0.2455 -0.037 )("PiP" Black -0.2455 0.035 )
        ("SquaS" (colour 254 242 0) -0.14 -0.001 )("PiP" Black -0.1782 -0.037 )
        ("PiP" White -0.1782 0.035 )("PiP" White -0.1005 -0.037 )("PiP" White -0.1005 0.035 )
        
        ("SquaS" (colour 255 127 0) 0.43 -0.286 )("PiP" Black 0.4682 -0.322 )
        ("PiP" White 0.4682 -0.25 )("PiP" White 0.3905 -0.322 )("PiP" White 0.3905 -0.25 )
        ("SquaS" (colour 254 0 0) 0.285 -0.286 )("PiP" Black 0.3232 -0.322 )
        ("PiP" Black 0.3232 -0.25 )("PiP" Black 0.2455 -0.322 )("PiP" Black 0.2455 -0.25 )
        ("SquaS" (colour 163 73 163) 0.14 -0.286 )("PiP" Black 0.1782 -0.322 )
        ("PiP" White 0.1782 -0.25 )("PiP" Black 0.1005 -0.322 )("PiP" White 0.1005 -0.25 )
        ("SquaS" (colour 254 242 0) 0.43 -0.144 )("PiP" Black 0.4682 -0.18 )
        ("PiP" Black 0.4682 -0.108 )("PiP" White 0.3905 -0.18 )("PiP" Black 0.3905 -0.108 )
        ("SquaS" (colour 0 230 230) 0.14 -0.144 )("PiP" Black 0.1782 -0.18 )
        ("PiP" White 0.1782 -0.108 )("PiP" Black 0.1005 -0.18 )("PiP" Black 0.1005 -0.108 )
        ("SquaS" (colour 0 232 0) 0.43 -0.001 )("PiP" Black 0.4682 -0.037 )
        ("PiP" Black 0.4682 0.035 )("PiP" Black 0.3905 -0.037 )("PiP" White 0.3905 0.035 )
        ("SquaS" (colour 87 99 51) 0.285 -0.001 )("PiP" Black 0.3232 -0.037 )
        ("PiP" White 0.3232 0.035 )("PiP" White 0.2455 -0.037 )("PiP" Black 0.2455 0.035 )
        ("SquaS" (colour 52 64 200) 0.14 -0.001 )("PiP" Black 0.1782 -0.037 )
        ("PiP" Black 0.1782 0.035 )("PiP" White 0.1005 -0.037 )("PiP" White 0.1005 0.035 )
        
        ("SquaX" "LG" "Bl" 0.137 0.137 0.001 -0.142)
        ("DiscX" "LG" "Wh" 0.125 0.001 -0.142) ("DiscX" "LG" "Bl" 0.10 0.001 -0.142)
        ("DiscX" "LG" "Wh" 0.06 0.001 -0.142) ("DiscX" "LG" "Bl" 0.02 0.001 -0.142)
        ("DiscX" "Wh" "LG" 0.01 0.001 -0.142)
        ("SquaX" "Bl" "Bl" 0.138 0.138 0.285 0.286) ("SquaX" "LG" "LG" 0.11 0.11 0.285 0.286)
        ("SquaX" "Wh" "Wh" 0.138 0.138 -0.285 0.286) ("SquaX" "LG" "LG" 0.11 0.11 -0.285 0.286)
        
        ("SquaX" "Wh" "Wh" 0.138 0.138 -0.285 -0.144) ("SquaX" "LG" "LG" 0.11 0.11 -0.285 -0.144)
        ("SquaX" "Bl" "Bl" 0.138 0.138 0.285 -0.144) ("SquaX" "LG" "LG" 0.11 0.11 0.285 -0.144)
        
        ("SquaX" "Wh" "Wh" 0.138 0.138 -0.43 0.286) ("SquaX" "LG" "LG" 0.11 0.11 -0.43 0.286 )
        ("RectS"  White White 0.13  0.007 -0.43 0.305) ("RectS" White White 0.13 0.007 -0.43 0.265)
        ("RectS"  White White 0.006 0.17 -0.41 0.284) ("RectS" White White 0.006 0.17 -0.45 0.284)
        
        ("SquaX" "Bl" "Bl" 0.138 0.138 0.43 0.286) ("SquaX" "LG" "LG" 0.11 0.11 0.43 0.286 )
        ("RectS"  Black Black 0.13  0.007 0.43 0.305) ("RectS" Black Black 0.13 0.007 0.43 0.265)
        ("RectS"  Black Black 0.006 0.17 0.41 0.284) ("RectS" Black Black 0.006 0.17 0.45 0.284)
        
        ("DiscX" "G1" "G2" 0.06 0.01 0.16) ("DiscX" "G1" "G2" 0.06 -0.01 0.16)("DiscX" "G1" "G2" 0.06 0.01 0.14) // Mensa_Logo
        ("DiscX" "G1" "G2" 0.06 -0.01 0.14) ("RectX" "G1" "G1" 0.02 0.2 0.0 0.15) ("RectX" "G1" "G1" 0.2 0.02 0.0 0.15)
        ("DiscX" "G1" "G1" 0.075 0.0 0.15) ("SquaX" "G2" "G2" 0.03 0.005 0.0 0.187) ("SquaX" "G2" "G2" 0.03 0.005 0.0 0.113)
        ("SquaX" "G2" "G2" 0.005 0.03 0.037 0.15) ("SquaX" "G2" "G2" 0.005 0.03 -0.037 0.15) ("Minu" "G2" "G2" 0.036 0.043 90 -0.004 0.168)
        ("Minu" "G2" "G2" 0.03 0.045 90 -0.031 0.16)("Minu" "G2" "G2" 0.03 0.045 90 0.014 0.16) ("Minu" "G2" "G2" 0.03 0.045 30 -0.014 0.152)
        ("Minu" "G2" "G2" 0.03 0.045 330 0.006 0.149) ("DiscX" "G2" "G2" 0.025 0.0 0.131)("DiscX" "G1" "G2" 0.016 0.0 0.131)
        
        (player Colour P1 (colour <Starter:color1>)) (player Colour P2 (colour <Starter:color2>)) (stackType Default 0.5 )
        (piece Scale "Cone" 0.1 ) (piece Scale "Prisoner" 0.1 ) (piece Scale "Starter" 0.07 ) (piece Scale "Reserve" 0.07 )
        ("PieceDef" "Cone1"   <Starter:color1>) ("PieceDef" "Cone2" <Starter:color2>)
        ("PieceDef" "Starter1" <Starter:color1>) ("PieceDef" "Starter2" <Starter:color2>)
        ("PieceDef" "Reserve1"  <Starter:color1>) ("PieceDef" "Reserve2" <Starter:color2>)
        ("PieceDef" "Prisoner1"  <Starter:color2>) ("PieceDef" "Prisoner2" <Starter:color1>)
        (show Score " Steps")
    })
    (ai (alphaBeta (heuristics (influenceAdvanced))))
)
