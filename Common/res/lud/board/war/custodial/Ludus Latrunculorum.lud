(define "NoRepetition" <Repetition>)

//------------------------------------------------------------------------------

(game "Ludus Latrunculorum"  
    (players 2)  
    <Version>
)

//------------------------------------------------------------------------------

(option "Repetition of states" <Repetition> args:{ <activate> }
{
	(item "Yes" <> "States can be repeated.")*
	(item "No" <(meta (noRepeat))> "States can not be repeated.")
})

(option "Suggested Variants" <Version> args:{ <version> }
{
(item "Schadler"
	<
	// Capture method in LL
	(define "Custodial"
	    (custodial
	        #1
	        Orthogonal
	        (between
	            (max 1)	
	            #2
	            #3
	        )
	        #4
	    )	
	)

	// Capture/Release effect
	(define "Flip" (flip (between)))

	// State of pieces
	(define "IsAlligatus" (= 1 (state at:#1)))
	(define "IsVagi" (= 0 (state at:#1)))

	// Block a piece
	(define "Blocked" 
	    ("Custodial"
	        (from (last To))	
	        if:(and (= (what at:(between)) (next)) ("IsVagi" (between)))
	        (apply 
	            (and
	                ("Flip")
	                ("Rescue")
	            )
	        )
	        (to if:(and (is Friend (who at:(to))) ("IsVagi" (to))))
	    )
	)

	// Rescue a piece in capturing the attacker.
	(define "Rescue" 
	    ("Custodial"
	        (from (between)) 
	        if:(and (= (what at:(between)) (mover) ) ("IsAlligatus" (between)))
	        (apply ("Flip")) 
	        (to if:(and (is Enemy (who at:(to))) ("IsVagi" (to))))
	    )
	)

	// Release a piece in going away
	(define "Released"
	    ("Custodial"
	        (from (last From)) 	
	        if:(and (= (what at:(between)) (next) ) ("IsAlligatus" (between)))
	        (apply ("Flip")) 
	        (to if:(and (is Friend (who at:(to))) ("IsVagi" (to))))
	    )
	)

	// Hop any piece
	(define "Hop"
	    (move
	        Hop
	        #1
	        Orthogonal 
	        (between if:(not (is Empty (between))))
	        (to 
	            if:(and 
	                (is Empty (to)) 
	                (not (is Visited (to))) 
	            )
	        )
	        #2
	    )	
	)

	// Remove blocked enemy piece
	(define "RemoveBlockedEnemyPiece"
	    (move
	        Remove 
	        (forEach (sites Occupied by:Next) if:("IsAlligatus" (site)))
	    )	
	)

	// Movement of the pieces.
	(define "UlrichPieceMovement"
			(if (= 0 (state at:(from)))
	            (or
	                ("StepOrthogonalToEmpty")
	                ("Hop" ~ (then (if (can Move ("Hop" (from (last To)))) (moveAgain))))
	                (then
	                    (and ("Released") ("Blocked"))
	                )
	            )
	        )	
	)
	
    (equipment { 
        (board (square 8)) 
        (hand Each)
        (piece "Vagi" Each (flips 0 1)
            ("UlrichPieceMovement")
        )
    })
    
    (rules
    	("NoRepetition")
    		
        (start (place "Vagi" "Hand" count:16) )
        
        phases:{
        (phase "Placement" 
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                )
            ) 
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        
        (phase "Movement"
            (play 
                (if "SameTurn"
                    (or
                        ("Hop" 
                            (from (last To)) 
                            (then 
                                (and {
                                    (if (can Move ("Hop" (from (last To)))) (moveAgain))
                                    ("Released")
                                    ("Blocked")
                                })
                            )
                        )
                        (move Pass)
                    )		
                    (or
                        (forEach Piece)
                        ("RemoveBlockedEnemyPiece")
                    )
                )
                
            )
        )
        
        }
        
        (end (if (= (count Pieces Next) 1) (result Mover Win))) 
    )
	>
"Rules suggested by Ulrich Schädler."
)*

(item "Museum Quintana" 
	<
    (equipment { 
        (board (square 8)) 
        (piece "Counter" Each 
            (move
                Slide
                Orthogonal
                (then 
                    (custodial 
                        (from (last To)) 
                        Orthogonal
                        (between 
                            (max 1) 
                            if:(is Enemy (who at:(between))) 
                            (apply (remove (between)))
                        )
                        (to if:(is Friend (who at:(to)))) 
                    ) 
                ) 
            ) 
        )
    })
    (rules 
        	("NoRepetition")
            (start { (place "Counter1" (expand (sites Bottom) )) (place "Counter2" (expand (sites Top) )) })
            (play (forEach Piece))
            (end (if ("NoPiece" Next) (result Mover Win))) 
        )
	>	
"Ruleset used for an example in an exhibit at the Museum Quintana."
)

(item "Falkener"      
        <
        (equipment { 
            (board (square 12)) 
            (piece "Counter" Each 
                (move
                    Step
                    (to if:(is Empty (to))) 
                    (then 
                        (custodial 
                            (from (last To)) 
                            (between 
                                (max 1) 
                                if:(is Enemy (who at:(between))) 
                                (apply (remove (between)))
                            )
                            (to if:(is Friend (who at:(to)))) 
                        ) 
                    ) 
                ) 
            )
        })
        (rules 
            ("NoRepetition")
            (start { 
                (place "Counter1" (difference (expand (sites Bottom) steps:4) (sites Phase 1))) 
                (place "Counter2" (difference (expand (sites Top) steps:4) (sites Phase 1))) 
            })
            (play (forEach Piece))
            (end (if (no Moves Next) (result Mover Win))) 
        )
        >
        "Rules highly speculative and made by E. Falkener."
    )

(item "Kowalski 10x11"      
		<
		(define "CustodialCapture"
				(custodial 
                        (from (last To))
                        Orthogonal 
                        (between 
                            (max 1) 
                            if:(= (what at:(between)) (id "Counter" Next)) 
                            (apply (remove (between)))
                        )
                        (to if:(is Friend (who at:(to)))) 
                    )	
		)
		
		(define "SurroundOnCorners" 
				(surround 
                        (from (last To)) 
                        Orthogonal 
                        (between 
                            if:(and 
                                (is In (between) (sites Corners)) 
                                (= (what at:(between)) (id "Counter" Next))
                            ) 
                            (apply (remove (between)))
                        ) 
                        (to if:(is Friend (who at:(to)))) 
                    )	
		)
		
        (equipment { 
            (board (rectangle 10 11)) 
            (piece "Counter" Each 
                (move
                    Slide
                    Orthogonal
                    (then 
                        (and
                            ("CustodialCapture")
                            ("SurroundOnCorners")
                        )
                    )
                )
            )
            (piece "Dux" Each     	
                (move
                    Slide
                    Orthogonal
                    (then 
                        (and
                            ("CustodialCapture")
                            ("SurroundOnCorners")
                        )
                    )
                )
            )
        })
        (rules 
            ("NoRepetition")
            (start { 
                (place "Counter1" (difference (sites Bottom) (sites {5}))) 
                (place "Counter2" (difference (sites Top) (sites {104}))) 
                (place "Dux1" coord:"F1") (place "Dux2" coord:"F10")
            })
            (play (forEach Piece))
            (end (if (no Moves Next) (result Mover Win))) 
        )
        >
        "Ruleset suggested by Kowalski played on a 10x11 board."
    )

(item "Kowalski 8x12"      
<
(define "CustodialCapture"
		(custodial 
                (from (last To))
                Orthogonal 
                (between 
                    (max 1) 
                    if:(= (what at:(between)) (id "Counter" Next)) 
                    (apply (remove (between)))
                )
                (to if:(is Friend (who at:(to)))) 
            )	
)

(define "SurroundOnCorners" 
		(surround 
                (from (last To)) 
                Orthogonal 
                (between 
                    if:(and 
                        (is In (between) (sites Corners)) 
                        (= (what at:(between)) (id "Counter" Next))
                    ) 
                    (apply (remove (between)))
                ) 
                (to if:(is Friend (who at:(to)))) 
            )	
)

(equipment { 
    (board (rectangle 8 12)) 
    (piece "Counter" Each 
        (move
            Slide
            Orthogonal
            (then 
                (and
                    ("CustodialCapture")
                    ("SurroundOnCorners")
                )
            )
        )
    )
    (piece "Dux" Each     	
        (move
            Slide
            Orthogonal
            (then 
                (and
                    ("CustodialCapture")
                    ("SurroundOnCorners")
                )
            )
        )
    )
})
(rules 
    ("NoRepetition")
    (start { 
        (place "Counter1" (sites Bottom)) (place "Counter2" (sites Top)) 
        (place "Dux1" coord:"G2") (place "Dux2" coord:"F7")
    })
    (play (forEach Piece))
    (end (if (no Moves Next) (result Mover Win))) 
)
>
"Ruleset suggested by Kowalski played on a 8x12 board."
)

(item "Bell 8x7"      
        <
        (define "CustodialCapture"
        		(custodial 
                        (from (last To)) 
                        Orthogonal 
                        (between (max 1) if:(is Enemy (who at:(between))) (apply (remove (between) (then (and (moveAgain) (set Counter))))))
                        (to if:(or (is Friend (who at:(to))) (is In (to) (sites Corners))))
                    )	
        )
        
        (define "StepMove" (move Step #1 Orthogonal (to if:(is Empty (to))) #2))
        (define "HopMove" (move Hop #1 Orthogonal (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to))) #2))
        
        (equipment { 
            (board (rectangle 8 7)) 
            (hand Each size:2)
            
            (piece "Counter" Each ("StepMove" ~ (then ("CustodialCapture")))) 
            
            (piece "Dux" Each 
                (or
                	("StepMove")
                	("HopMove")
                    (then ("CustodialCapture")) 
                )
            )  
        })
        (rules 
            ("NoRepetition")
            (start { 
                (place "Counter1" (handSite P1) count:16) (place "Counter2" (handSite P2) count:16) 
                (place "Dux1" (handSite P1 1) ) (place "Dux2" (handSite P2 1)) 
            })
            
            phases:{
            (phase "CounterPlacement" 
                (play 
                    (move 
                        (from (handSite Mover)) 
                        (to (sites Empty))
                        (then (if (not (is Mover Prev)) (moveAgain)))
                    )
                ) 
                (nextPhase Mover (is Empty (handSite Mover 0)) "DuxPlacement")
            )
            (phase "DuxPlacement" 
                (play 
                    (move 
                        (from (handSite Mover 1)) 
                        (to (sites Empty)) 
                        (then (set Counter))
                    )
                ) 
                (nextPhase Mover (is Empty (handSite Mover 1)) "Movement")
            )
            
            (phase "Movement" 
                (play (if "SameTurn"
                        (if (= (what at:(last To)) (id "Counter" Mover))
                        	("StepMove" (from (last To)) (then ("CustodialCapture")))
                            (or
                            	("StepMove" (from (last To)))
                            	("HopMove" (from (last To)))
                                (then ("CustodialCapture"))
                            )
                        )
                        (forEach Piece)
                    )
                )
                
                (end {
                    (if ("NoPiece" Next) (result Mover Win))
                    (if (= (counter) 29) 
                        (if (> (count Pieces P1) (count Pieces P2)) (result P1 Win))
                        (result P2 Win)
                    ) 
                }) 
            )
            }
        )
        >
        "Ruleset suggested by R. C. Bell on a 8x7 board."
    )

(item "Bell 8x8"      
        <
        (define "CustodialCapture"
        		(custodial 
                        (from (last To)) 
                        Orthogonal 
                        (between (max 1) if:(is Enemy (who at:(between))) (apply (remove (between) (then (and (moveAgain) (set Counter))))))
                        (to if:(or (is Friend (who at:(to))) (is In (to) (sites Corners))))
                    )	
        )
        
        (define "StepMove" (move Step #1 Orthogonal (to if:(is Empty (to))) #2))
        (define "HopMove" (move Hop #1 Orthogonal (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to))) #2))
        
        (equipment { 
            (board (square 8)) 
            (hand Each size:2)
            
            (piece "Counter" Each ("StepMove" ~ (then ("CustodialCapture")))) 
            
            (piece "Dux" Each 
                (or
                	("StepMove")
                	("HopMove")
                    (then ("CustodialCapture")) 
                )
            )  
        })
        (rules 
            ("NoRepetition")
            (start { 
                (place "Counter1" (handSite P1) count:16) (place "Counter2" (handSite P2) count:16) 
                (place "Dux1" (handSite P1 1) ) (place "Dux2" (handSite P2 1)) 
            })
            
            phases:{
            (phase "CounterPlacement" 
                (play 
                    (move 
                        (from (handSite Mover)) 
                        (to (sites Empty))
                        (then (if (not (is Mover Prev)) (moveAgain)))
                    )
                ) 
                (nextPhase Mover (is Empty (handSite Mover 0)) "DuxPlacement")
            )
            (phase "DuxPlacement" 
                (play 
                    (move 
                        (from (handSite Mover 1)) 
                        (to (sites Empty)) 
                        (then (set Counter))
                    )
                ) 
                (nextPhase Mover (is Empty (handSite Mover 1)) "Movement")
            )
            
            (phase "Movement" 
                (play (if "SameTurn"
                        (if (= (what at:(last To)) (id "Counter" Mover))
                        	("StepMove" (from (last To)) (then ("CustodialCapture")))
                            (or
                            	("StepMove" (from (last To)))
                            	("HopMove" (from (last To)))
                                (then ("CustodialCapture"))
                            )
                        )
                        (forEach Piece)
                    )
                )
                
                (end {
                    (if ("NoPiece" Next) (result Mover Win))
                    (if (= (counter) 29) 
                        (if (> (count Pieces P1) (count Pieces P2)) (result P1 Win))
                        (result P2 Win)
                    ) 
                }) 
            )
            }
        )
        >
        "Ruleset suggested by R. C. Bell on a 8x8 board."
    )

})

//------------------------------------------------------------------------------

(rulesets { 
    
    (ruleset "Ruleset/Schadler (Scholarly)" 
        {
    	"Suggested Variants/Schadler"
        }
    )*
    
    (ruleset "Ruleset/Museum Quintana (Suggested)" 
        {
        "Suggested Variants/Museum Quintana"
        }
    )
    
    (ruleset "Ruleset/Falkener (Suggested)" 
        {
    	"Suggested Variants/Falkener"
        }
    )
    
    (ruleset "Ruleset/Kowalski 10x11 (Suggested)" 
            {
        "Suggested Variants/Kowalski 10x11"
            }
        )
    
    (ruleset "Ruleset/Kowalski 8x12 (Suggested)" 
        {
        "Suggested Variants/Kowalski 8x12"
        }
    )
    
    (ruleset "Ruleset/Bell 8x7 (Suggested)" 
        {
        "Suggested Variants/Bell 8x7"
        }
    )
    
    (ruleset "Ruleset/Bell 8x8 (Suggested)" 
        {
        "Suggested Variants/Bell 8x8"
        }
    )
    
    (ruleset "Ruleset/Historical Information (Incomplete)" {
        
    })
})

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        }
    )
    
    (graphics {
        (piece Families {"Defined" "Isometric"})
        (board Colour Phase0 (colour 223 178 110))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (piece Rename piece:"Vagi" state:0 "Counter")
        (piece Rename piece:"Vagi" state:1 "DoubleCounter")
        (piece Rename piece:"Dux" "DoubleCounter")
    })
    
)

