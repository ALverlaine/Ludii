// Stargazers
// to do: scoring and end of game. Description & rules
//-----------------------------------------------------
// utilities

(define "AnyOfTheseSitesMeetThisCondition"
 //(not (all Sites #1 if:#2))
 (< 0 (size Array (array (forEach #1 #2))))
)
(define "FirstLivePiecesOf"  //Use of (sites Group) speeds up evaluation a bit toward the end of the game.
 (forEach
  of:(sites <Board:stars>)
  (sites Group
   from:(difference
    (intersection
     (sites Occupied by:#1) 
     (sites LineOfSight Piece at:(site))
    )
    (sites Around (site))
   )
   if:(is #1 (who at:(to)))
)))

(define "FirstLivePiecesOfx"
 (forEach
  of:(sites <Board:stars>)
  (difference
   (intersection
    (sites Occupied by:#1) 
    (sites LineOfSight Piece at:(site))
   )
   (sites Around (site))
)))

(define "UnmarkFirstLivePiecesOf"
 (forEach Value 
  (array ("FirstLivePiecesOf" #1))
  (set State at:(value) 0)
))
 
(define "UnMarkPieces"
 (forEach Value
  (array 
   (forEach
    (intersection (sites Occupied by:#1) (sites State 1))
    if:(< 0 
     (size Array
      (array
       (intersection
        {
         (sites Occupied by:#1)
         (sites State 0)
         (sites LineOfSight Piece at:(site))
        }
  )))))) 
  (set State at:(value) 0)
)) 

(define "MarkDeadAllDependantPiecesOf"
 (forEach Site
  (difference
   (sites Occupied by:#1)
   ("FirstLivePiecesOf" #1)
  )
  (set State at:(site) 1)
))

(define "MarkDeadGroupsOf"
 (do
  ("MarkDeadAllDependantPiecesOf" #1)
  next:(set Var "Count" (+ 1 (size Array (array (sites State 1))))
   (then 
    (while
     (> (var "Count") (size Array (array (sites State 1))))
     (set Var "Count" (size Array (array (sites State 1)))
      (then
       ("UnMarkPieces" #1)
)))))))

(define "CleanUpStatesLeftSetAfterRemoveDueToLudiiBug"
 (forEach Site
  (difference (sites State 1) (sites Occupied by:#1)) 
  (set State at:(site) 0)
))
     
(define "PlaceByThenCaptureOf"
 (do
  (move Add
   (piece (id "Ball" #1))
   (to
    (difference (sites Empty) (sites <Board:stars>))
    (apply (set State at:(to) 0))
   )
   (then
//    (and
     (do
      ("MarkDeadGroupsOf" #2) 
//      next:(set Value Mover (+ (value Player Mover) (count Pieces in:(sites State 1)))
//       (then
//        (remove (sites State 1)
//         (then ("CleanUpStatesLeftSetAfterRemoveDueToLudiiBug" #1) )
//     ) //)))
     next:("MarkDeadGroupsOf" #1 )
  )))
  ifAfterwards:(= 0 (state at:(last To)))  //no suicide
  (then
   (set Score #2
    (size Array
     (array
      (intersection (sites State 1) (sites Occupied by:#1))
    ))
    (then
     (set Score #1
      (size Array
       (array
        (intersection (sites State 1) (sites Occupied by:#2))
      ))
      <Protocol:type>
))))))

//-----------
(game "Stargazers" 
 (players 2)
 (equipment
   {
    <Board:used>
    (piece "Ball" Each) 
    (piece "StarFour" Neutral)
   }
 )
 (rules
  (start 
   {
    (place "StarFour0" <Board:stars>)
   }
  )
  (play 
   ("PlaceByThenCaptureOf" Mover Next) 
  )
  (end
   {
    (if
     (all Passed)
     (byScore)
    )
    (if
     (and
      (no Moves Mover)
      (= (score P1) (score P2))
     )
     (result Mover Loss)
    )
    (if
     (and
      (no Moves Mover)
      (!= (score P1) (score P2))
     )
     (byScore)
    )
   }
)))
//----------

//--------------------------
// Rotation, board, cells or vertices to remove 
(define "SymRemover" (renumber (rotate (* (- #1 1) (/ 360 #1)) (trim (remove #2 #3)))))

// symmetry, board, recurrent removals, final edge removal 
(define "RaggedSquare" ("SymRemover" 4 ("SymRemover" 4 ("SymRemover" 4 ("SymRemover" 4 #1 #2) #2) #2) #3))

// board, recurrent removals, final edge removal 
(define "RaggedTri" ("SymRemover" 1 ("SymRemover" 3 ("SymRemover" 3 #1 #2) #2) #3))
(define "RaggedHex" ("SymRemover" 6 ("SymRemover" 6 ("SymRemover" 6 ("SymRemover" 6 ("SymRemover" 6 ("SymRemover" 6 #1 #2) #2) #2) #2) #2) #3))

// board, recurrent removals
(define "Sym2Remover" ("SymRemover" 2  ("SymRemover" 2 #1 #2) #2))
  
//-------------------------------------------------------
// Board definitions


(option "Size" <Board> args:{<used> <stars>} 
 {
  (item "12-Star (39 cells)"
   <(board ("RaggedTri" (hex 5 6) cells:{0..3 6 7 21 30} cells:{0..3 5 6 19 27}) use:Cell)>  
   <{0 1 5 12 17 22 27 34 38 41 49 50}>
   "12-Star (39 cells)"
  )
  (item "27-Star (111 cells)"
   <(board ("RaggedTri" (hex 8 9) cells:{0..5 9..12 19 20 42 55 69 84 85 100} cells:{0..5 7..10 15 16 36 49 62 75 76 89}) use:Cell)>  //0..5 9..12 19 20 42 55
   <{0 1 5 12 13 20 28 35 38 45 48 55 64 71 74 81 84 91 99 106 107 114 120 125 132 136 137}>
   "27-Star (111 cells)"
  )
  (item "18-Star (63 cells)"
   <(board ("RaggedTri" (hex 6 8) cells:{0..5 8..11 17 18 38 50} cells:{0..5 7..10 15 16 35 45}) use:Cell)>  
   <{0 1 5 12 13 20 27 34 41 42 49 55 60 67 71 74 82 83}>
   "18-Star (63 cells)"
  )**
//   (item "19-Star (72 cell)"
//   <(board ("RaggedHex" (hex 7) cells:{0..3 7..8} cells:{0..3 5..6}) use:Cell)>  
//   <{ 0 1 5 12 17 23 30 31 38 45 52 59 60 67 73 78 85 89 90}>
//   "19 Stars (72 cell - ties possible)"
//  )
 }
)

(option "Protocol" <Protocol> args:{<type>}
 {
  (item "Alternating" < > "Alternating")  
  (item "Turns 122*" <(then (if (and "NewTurn" (<= 0 (counter))) (moveAgain)))> "Turns 122*")**
 }
)
//------------------------------------------------

(metadata
  (info
    {
     }
  ) 
  
  (graphics 
   {
    (player Colour P1 (colour 144 39 0))
    (player Colour P2 (colour Cream))
    (piece Scale "Ball" .8)
    (piece Background state:0 image:"Disc" fillColour:(colour 0 0 0 130) edgeColour:(colour 0 0 0 0) scale:.87 offsetX:.3 offsetY:.55 )
    (piece Background state:1 image:"Hex" fillColour:(colour 0 0 0 255)  edgeColour:(colour 0 0 0 0) scaleX:.95 scaleY:1.03)
    (board StyleThickness InnerEdges 0.4)
    (board StyleThickness OuterEdges 0.6)
    (board StyleThickness InnerVertices 0.45)
    (board StyleThickness OuterVertices 0.45)
    (board Colour InnerVertices (colour Grey))
    (board Colour OuterVertices (colour Grey))
    (board Colour InnerEdges (colour Black))
    (board Colour OuterEdges (colour Black))
    (board Background fillColour:(colour 170 160 140) edgeColour:(colour 0 0 0 0) scale:1.35 )
    (board Colour Phase0 (colour HumanLight))
    (show Edges Diagonal Hidden (colour DarkGrey))
    (region Colour <Board:stars> regionSiteType:Cell (colour DarkBlue) scale:1.02)
//    (show Piece State)
    (piece Foreground P1 state:1 image:"starFour.svg" fillColour:(colour Black) edgeColour:(colour 0 0 0 100) scale:.55 rotation:45)
    (piece Foreground P2 state:1 image:"starFour.svg" fillColour:(colour Black) edgeColour:(colour 0 0 0 0) scale:.5 rotation:45)
  }
 )
 (ai (heuristics (score)))
)


